table.ff(df1$SEXO)
toc()
tic("ff")
table.ff(df1$SEXO)
toc()
tic("ff")
table.ff(df1$SEXO)
toc()
tic("ff")
table.ff(df1$SEXO)
toc()
tic("ff")
table.ff(df1$SEXO)
toc()
tic("ff")
table.ff(df1$SEXO)
toc()
tic("ff")
table.ff(df1$SEXO)
toc()
tic("ff")
table.ff(df1$SEXO)
toc()
library(Hmisc)
describe(df1)
describe(as.data.frame.ffdf(df1))
describe(df2)
tic("ff")
describe(as.data.frame.ffdf(df1))
toc()
tic("r")
describe(df2)
toc()
df3<-as.data.frame.ffdf(df1)
object.size(df3)
object.size(df2)
?as.data.frame.ffdf()
df4<-as.data.frame.ffdf(df2)
object.size(df4)
install.packages("bigmemory")
gc()
?gc
#install.packages("bigmemory")
library(bigmemory)
df5<-read.big.matrix("need_big.csv", header = TRUE, sep = ",", type = "double")
df5<-read.big.matrix("200613COVID19MEXICO.csv", header = TRUE, sep = ",")
head(df5)
object.size(df5)
df5[,1]
setwd("C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata")
setwd("C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata")
library(ff)
library(ffbase)
library(tictoc)
library(ffbase2)
install.packages("ffbase2")
library(ff)
library(ffbase)
setwd("C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata")
dir()
bd1<-read.csv("200614COVID19MEXICO.csv",sep=",",header=T)
object.size(bd1)
head(bd1)
head(bd1)
object.size(bd1)
library(help=ff)
#paso 1: tener un directorio para archivos temporales de ff
system("mkdir ffdf")
#paso 2: definir la carpeta temporal
options(fftempdir="C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata\\ffdf")
#paso 3: Cargar la base de datos
?read.csv.ffdf()
#paso 3: Cargar la base de datos
bd2<-read.csv.ffdf("200614COVID19MEXICO.csv")
#paso 3: Cargar la base de datos
bd2<-read.csv.ffdf("200614COVID19MEXICO.csv",sep=",")
#paso 3: Cargar la base de datos
bd2<-read.csv.ffdf("200614COVID19MEXICO.csv",sep=",",next.rows=100000)
#paso 3: Cargar la base de datos
bd2<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",next.rows=100000)
#paso 3: Cargar la base de datos
bd2<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",next.rows=100000)
#paso 3: Cargar la base de datos
bd2<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",next.rows=100000,
colClasses=NA)
#paso 3: Cargar la base de datos
bd2<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
next.rows=100000,colClasses=NA,VERBOSE=T)
object.size(bd1)
object.size(bd2)
object.size(bd1)/1000000
object.size(bd2)/1000000
#paso 3: Cargar la base de datos
bd2<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
next.rows=100000,colClasses=NA,VERBOSE=F)
bd3<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,VERBOSE=T)
bd3<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
first.rows=-1,colClasses=NA,VERBOSE=T)
object.size(bd3)/1000000
object.size(bd2)/1000000
bd4<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
next.rows=1000,colClasses=NA,VERBOSE=F)
bd4<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
next.rows=1000,colClasses=NA,VERBOSE=T)
object.size(bd4)/1000000 # CSV.FFDF 1000
object.size(bd2)/1000000 # CSV.FFDF 100000
object.size(bd3)/1000000 # CSV.FFDF TODO
object.size(bd4)/1000000 # CSV.FFDF 1000
#USO DE LAS FFDF
table(bd2$SEXO)
barplot(table(bd2$SEXO))
table(bd1$SEXO)
table(bd2$SEXO)
table(bd1$SEXO)
table(bd2$SEXO)
table(bd1$SEXO)
table(bd2$SEXO)
library(tictoc)
tic("R")
table(bd1$SEXO)
toc()
tic("ffdf")
table(bd2$SEXO)
toc()
table.ff(bd2$SEXO)
tic("R")
table(bd1$SEXO)
toc()
tic("ffdf")
table(bd2$SEXO)
toc()
tic("ffdf table")
table.ff(bd2$SEXO)
toc()
tic("R")
table(bd1$SEXO)
toc()
tic("ffdf")
table(bd2$SEXO)
toc()
tic("ffdf table")
table.ff(bd2$SEXO)
toc()
tic("R")
table(bd1$SEXO)
toc()
tic("ffdf")
table(bd2$SEXO)
toc()
tic("ffdf table")
table.ff(bd2$SEXO)
toc()
tic("R")
table(bd1$SEXO)
toc()
tic("ffdf")
table(bd2$SEXO)
toc()
tic("ffdf table")
table.ff(bd2$SEXO)
toc()
tic("R")
table(bd1$SEXO)
toc()
tic("ffdf")
table(bd2$SEXO)
toc()
tic("ffdf table")
table.ff(bd2$SEXO)
toc()
tic("R")
table(bd1$SEXO)
toc()
tic("ffdf")
table(bd2$SEXO)
toc()
tic("ffdf table")
table.ff(bd2$SEXO)
toc()
tic("R")
table(bd1$SEXO)
toc()
tic("ffdf")
table(bd2$SEXO)
toc()
tic("ffdf table")
table.ff(bd2$SEXO)
toc()
object.size(bd1)/object.size(bd2)
bd1
table(bd1$SEXO)
table(bd2$SEXO)
#R: 1 G ->
#FFDF: 200 M ->
class(bd1)
class(bd2)
bd5<-as.data.frame.ffdf(bd2)
class(bd5)
describe(bd5)
library(Hmisc)
describe(bd1)
describe(bd2)
describe(bd5)
object.size(bd5)
object.size(bd1)
object.size(bd2)
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
getwd()
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
rm(list=ls())
library(bigmemory)
#limitación de bigmemory, todos los variables de la base de datos de interés deben ser numéricas.
load("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-383\\data\\oct20.RData")
bd1<-computo[,13:25]
str(bd1)
object.size(bd1)/10^6
bd2<-as.big.matrix(as.matrix(bd1))
object.size(bd1)
object.size(bd2)
object.size(bd1)/object.size(bd2)
#xx<-read.big.matrix(".csv",sep=",")
#alternativamente read.big.matrix
dim(bd2)
summary(bd2)
summary(bd1)
mean(bd2[,1])
summary(bd2[,2])
hist(bd2[,1])
table(bd2[,1])
t(bd2)
t(as.matrix(bd2))
t(bd2)
names(bd2)
dimnames(bd2)
lm(CC~MNR,data=bd2)
lm(CC~MNR,data=bd2)
library(bigtabulate)
library(biganalytics)
library(biglm)
library(bigstatsr)
bigglm.big.matrix(CC~MNR,data=bd2)
reg0<-<-bigglm.big.matrix(CC~MNR,data=bd2)
summary(reg0)
reg0<-<-bigglm.big.matrix(CC~MNR,data=bd2)
reg0<-bigglm.big.matrix(CC~MNR,data=bd2)
summary(reg0)
class(reg0)
library(bigmemory)
library(biganalytics)
need.big.bm <- attach.resource("need_big.desc")
library(parallel)
detectCores()
cl <- makeCluster(3, type = "SOCK")
library(snow)
install.packages("snow")
library(snow)
detectCores()
#install.packages("parallel")
install.packages("snow")
library(parallel)
library(snow)
detectCores()
cl <- makeCluster(3, type = "SOCK")
cl
cl
View(cl)
?makeCluster()
clusterApply(cl, 1:2, get("+"), 3)
#install.packages("parallel")
#install.packages("snow")
load("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-383\\data\\oct20.RData")
?clusterApply(cl, computo, get("+"), 3)
?clusterApply(cl, computo, get("+"), 3)
clusterApply(cl, computo$CC, mean)
names(computo)
clusterApply(cl, computo[,15:16], mean)
clusterApply(cl, computo[,15:17], mean)
apply(computo[,15:17], mean)
apply(computo[,15:17],1, mean)
apply(computo[,15:17],2, mean)
clusterApply(cl, computo[,15:17], mean)
apply(computo[,15:17],2, mean)
clusterApply(cl, computo[,15:17], mean)
apply(computo[,15:17],2, mean)
clusterApply(cl, computo[,15:17], mean)
parSapply(cl, computo[,15:17], mean)
parSapply(cl, computo[,15:17], mean)
apply(computo[,15:17],2, mean)
clusterApply(cl, computo[,15:17], mean)
parSapply(cl, computo[,15:17], mean)
mclapply()
mclapply(computo[,15:17],FUN=mean,mc.cores = 1)
mclapply(computo[,15:17],FUN=mean,mc.cores = 2)
mclapply(computo[,15:17],FUN=mean,mc.cores = 1)#Windows no soporta >1
?mclapply(computo[,15:17],FUN=mean,mc.cores = 1)#Windows no soporta >1
library(doParallel)
library(help="parallel")
cl <- makeCluster(10, type = "SOCK")
cl
stopCluster(cl)
stopCluster(cl)
?makeCluster
#matrix enorme
mm<-matrix(rnorm(1000000*4),nrow = 1000000,ncol=4)
apply(mm,2,mean)
stopCluster(cl)
apply(mm,2,mean)
apply(mm,2,mean)
#matrix enorme
mm<-matrix(rnorm(1000000*10),nrow = 1000000,ncol=10)
apply(mm,2,mean)
apply(mm,2,mean)
cl <- makeCluster(3, type = "SOCK")
cl
#matrix enorme
mm<-matrix(rnorm(1000000*10),nrow = 1000000,ncol=10)
apply(mm,2,mean)
clusterApply(cl, computo[,15:17], mean)
parSapply(cl, computo[,15:17], mean)
clusterApply(cl, mm, mean)
parSapply(cl, mm, mean)
#matrix enorme
mm<-matrix(rnorm(1000000*10),nrow = 1000000,ncol=10)
mm<-as.data.frame(mm)
apply(mm,2,mean)
clusterApply(cl, mm, mean)
parSapply(cl, mm, mean)
#matrix enorme
mm<-matrix(rnorm(10000000*10),nrow = 10000000,ncol=10)
mm<-as.data.frame(mm)
object.size(mm)/10^6
apply(mm,2,mean)
clusterApply(cl, mm, mean)
tic("R:")
apply(mm,2,mean)
toc()
tic("Parallel1:")
clusterApply(cl, mm, mean)
toc()
tic("Parallel2:")
parSapply(cl, mm, mean)
toc()
library(tictoc)
tic("R:")
apply(mm,2,mean)
toc()
tic("R:")
apply(mm,2,mean)
toc()
tic("Parallel1:")
clusterApply(cl, mm, mean)
toc()
tic("Parallel2:")
parSapply(cl, mm, mean)
toc()
tic("R:")
apply(mm,2,mean)
toc()
tic("Parallel1:")
clusterApply(cl, mm, mean)
toc()
tic("Parallel2:")
parSapply(cl, mm, mean)
toc()
stopCluster(cl)
cl <- makeCluster(10, type = "SOCK")
cl
tic("R:")
apply(mm,2,mean)
toc()
tic("Parallel1:")
clusterApply(cl, mm, mean)
toc()
tic("Parallel2:")
parSapply(cl, mm, mean)
toc()
stopCluster(cl)
cl <- makeCluster(2, type = "SOCK")
cl
object.size(mm)/10^6
tic("R:")
apply(mm,2,mean)
toc()
tic("Parallel1:")
clusterApply(cl, mm, mean)
toc()
tic("Parallel2:")
parSapply(cl, mm, mean)
toc()
#matrix enorme
mm<-matrix(rnorm(10000000*20),nrow = 10000000,ncol=20)
mm<-as.data.frame(mm)
object.size(mm)/10^6
tic("R:")
apply(mm,2,mean)
toc()
tic("Parallel1:")
clusterApply(cl, mm, mean)
toc()
tic("Parallel2:")
parSapply(cl, mm, mean)
toc()
na.rm(is=ls())
na.rm(list=ls())
rm(list=ls())
cl
unlink('4_BDinR_cache', recursive = TRUE)
mm<-matrix(rnorm(10000000*15),nrow = 10000000,ncol=15)
mm<-as.data.frame(mm)
object.size(mm)/10^6
tic("R:")
m0<-apply(mm,2,mean)
toc()
tic("Parallel1:")
m1<-clusterApply(cl, mm, mean)
toc()
tic("Parallel2:")
m2<-parSapply(cl, mm, mean)
toc()
cl <- makeCluster(3, type = "SOCK")
tic("R:")
m0<-apply(mm,2,mean)
toc()
tic("Parallel1:")
m1<-clusterApply(cl, mm, mean)
toc()
tic("Parallel2:")
m2<-parSapply(cl, mm, mean)
toc()
system.time()
library(parallel)
library(snow)
library(tictoc)
detectCores()
cl <- makeCluster(3, type = "SOCK")
cl
teval
teval<-function(...){
gc()
start<-proc.time()
result<-eval(...)
finish<-proc.time()
return(list(Duration=finish--start,Redult=result))
}
teval(mean(10^6))
teval(mean(10^6))
teval<-function(...){
gc()
start<-proc.time()
result<-eval(...)
finish<-proc.time()
return(list(Duration=finish-start,Result=result))
}
teval(mean(10^6))
teval<-function(...){
gc()
start<-proc.time()
result<-eval(...)
finish<-proc.time()
return(list(Duration=finish-start,Result=result))
}
#install.packages("parallel")
#install.packages("snow")
load("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-383\\data\\oct20.RData")
library(parallel)
library(snow)
library(tictoc)
detectCores()
cl <- makeCluster(3, type = "SOCK")
cl
apply(computo[,15:17],2, mean)
clusterApply(cl, computo[,15:17], mean)
parSapply(cl, computo[,15:17], mean)
mclapply(computo[,15:17],FUN=mean,mc.cores = 1)#Windows no soporta >1
teval(apply(computo[,15:17],2, mean))
teval(apply(computo[,15:17],2, mean))
teval(clusterApply(cl, computo[,15:17], mean))
teval(parSapply(cl, computo[,15:17], mean))
teval(mclapply(computo[,15:17],FUN=mean,mc.cores = 1))
#matrix enorme
mm<-matrix(rnorm(10000000*15),nrow = 10000000,ncol=15)
teval(m0<-apply(mm,2,mean))
mm<-as.data.frame(mm)
teval(m0<-apply(mm,2,mean))
teval(m1<-clusterApply(cl, mm, mean))
teval(m2<-parSapply(cl, mm, mean))
View(cl)
cl
#install.packages("parallel")
#install.packages("snow")
library(bigmemory)
mm<-matrix(rnorm(10000000*15),nrow = 10000000,ncol=15)
mm<-as.data.frame(mm)
mm<-as.big.matrix(mm)
?ff::as.data.frame.ffdf()
mclapply(X=list(A,B,C),FUN=mean)
?mclapply(X=list(A,B,C),FUN=mean)
library(parallel)
library(snow)
?mclapply(X=list(A,B,C),FUN=mean)
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
