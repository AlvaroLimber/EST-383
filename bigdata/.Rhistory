html_text(node)
covid<-read_html("https://www.worldometers.info/coronavirus/")
tab<-html_table(covid)
View(tab)
tab[[1]]
tab[[2]]
tab[[3]]
tab[[2]]
tab[[1]]
1713
1
1/13
179
1/9
0.4-1/9
covid<-read_html("https://www.worldometers.info/coronavirus/")
library(rvest)
covid<-read_html("https://www.worldometers.info/coronavirus/")
tab<-html_table(covid)
tab[[1]]#hoy
library(rvest)
covid<-read_html("https://www.worldometers.info/coronavirus/")
tab<-html_table(covid)
tab[[1]]#hoy
bd<-tab[[1]]#hoy
View(bd)
library(dplyr)
names(bd)
names(bd)
names(bd)[1]<-"id"
names(bd)
names(bd)[12]<-"muertesM"
names(bd)
names(bd)[2]<-"pais"
bd %>% filter(is.na(id)==F)
bd %>% filter(is.na(id)==F) %>% select(pais,muertesM)
bd %>% filter(is.na(id)==F) %>% select(pais,muertesM) %>% mutate(aux=gsub(",","",muertesM))
bd %>% filter(is.na(id)==F) %>% select(pais,muertesM) %>% mutate(aux=as.numeric(gsub(",","",muertesM)))
bd %>% filter(is.na(id)==F) %>% select(pais,muertesM) %>% mutate(muertesM=as.numeric(gsub(",","",muertesM)))
t1<-bd %>% filter(is.na(id)==F) %>% select(pais,muertesM) %>% mutate(muertesM=as.numeric(gsub(",","",muertesM)))
View(t1)
names(bd)
t1<-bd %>% filter(is.na(id)==F) %>% select(pais,muertesM) %>% mutate(muertesM=as.numeric(gsub(",","",muertesM)))
t1
t1<-na.omit(t1)
t1
order(t1$muertesM)
t1[order(t1$muertesM),]
t1<-t1[order(t1$muertesM),]
plot(1:204,t1$muertesM)
plot(1:204,t1$muertesM,type="h")
tail(t1)
#vacunas
vc<-read.csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv")
head(vc)
str(cv)
str(vc)
vc$date
unique(vc$date)
vc$date
library(lubridate)
vc$date<-ymd(vc$date)
str(vc)
library(ggplot2)
View(vc)
names(vc)
ggplot(vc,aes(date,daily_vaccinations))+geom_point()
ggplot(vc,aes(date,daily_vaccinations))+geom_point()
View(vc)
ggplot(vc %>% filter(iso_code=="AFG"),aes(date,daily_vaccinations))+geom_point()
library(ggplot2)
ggplot(vc %>% filter(iso_code=="AFG"),aes(date,daily_vaccinations))+geom_point()
names(bd)
names(vc)
vc %>% filter(iso_code=="AFG") %>% select(date,daily_vaccinations)
vc %>% filter(iso_code=="AFG") %>% select(date,daily_vaccinations) %>% plot()
vc %>% filter(iso_code=="AFG") %>% select(date,daily_vaccinations) %>% plot()
vc %>% filter(iso_code=="BOL") %>% select(date,daily_vaccinations) %>% plot()
vc %>% filter(iso_code=="BOL") %>% select(date,daily_vaccinations) %>% plot(type="b")
vc %>% filter(iso_code=="BOL") %>% select(date,daily_vaccinations) %>% plot(type="b",col="red")
ggplot(vc %>% filter(iso_code=="AFG"),aes(date,daily_vaccinations))
ggplot(vc %>% filter(iso_code=="AFG"),aes(date,daily_vaccinations))+geom_line()
ggplot(vc %>% filter(iso_code=="BOL"),aes(date,daily_vaccinations))+geom_line()
vc %>% filter(iso_code=="CHL") %>% select(date,daily_vaccinations) %>% plot(type="b",col="red")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(rvest)
ue<-read_html("http://seie.minedu.gob.bo/reportes/mapas_unidades_educativas/ficha/ver/82160036")
html_table(ue)
html_nodes(ue,"dd")
html_text(html_nodes(ue,"dd")
html_text(html_nodes(ue,"dd"))
html_text(html_nodes(ue,"li"))
html_text(html_nodes(ue,".m-b"))
html_table(ue)
html_table(ue)
html_text(html_nodes(ue,"dd"))
html_text(html_nodes(ue,"li"))
html_text(html_nodes(ue,".m-b"))
html_text(html_nodes(ue,".m-b"))
html_text(html_nodes(ue,"li"))
html_text(html_nodes(ue,"dd"))
html_table(ue)
s1<-html_table(ue)
s2<-html_text(html_nodes(ue,"dd"))
s3<-html_text(html_nodes(ue,"li"))
s4<-html_text(html_nodes(ue,".m-b"))
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
s1[[1]]
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
s1[[1]][2,]
s1[[1]][3,]
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
c(s1[[1]][2,],s1[[1]][3,])
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
rbind(s1[[1]][2,],s1[[1]][3,])
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,],s1[[1]][3,])
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,-1],s1[[1]][3,-1])
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1]
s1[[3]][2,-1],s1[[3]][3,-1]
s1[[4]][2,-1],s1[[4]][3,-1]
)
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
)
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1]
)
s2
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
s2
)
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
t(s2)
)
s3
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
t(s2),t(s3)
)
s4
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
t(s2),t(s3),t(s4))
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
data.frame(cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
t(s2),t(s3),t(s4)))
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
aux<-data.frame(cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
t(s2),t(s3),t(s4)))
names(x)
names(aux)
paste0("v",1:70)
names(aux)<-paste0("v",1:70)
View(aux)
70550008
rue<-c(82160036,70550008,80730123)
rue<-c(82160036,70550008,80730123)
bd<-NULL
for(i in rue){
www<-paste0("http://seie.minedu.gob.bo/reportes/mapas_unidades_educativas/ficha/ver/",i)
ue<-read_html(www)
s1<-html_table(ue)
s2<-html_text(html_nodes(ue,"dd"))
s3<-html_text(html_nodes(ue,"li"))
s4<-html_text(html_nodes(ue,".m-b"))
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
aux<-data.frame(cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
t(s2),t(s3),t(s4)))
names(aux)<-paste0("v",1:70)
bd<-rbind(bd,aux)
}
View(bd)
bd<-NULL
for(i in rue){
www<-paste0("http://seie.minedu.gob.bo/reportes/mapas_unidades_educativas/ficha/ver/",i)
ue<-read_html(www)
s1<-html_table(ue)
s2<-html_text(html_nodes(ue,"dd"))
s3<-html_text(html_nodes(ue,"li"))
s4<-html_text(html_nodes(ue,".m-b"))
#tarea (20 min): a partir de la información obtenida plantear y crear la estructura de  la base de datos.
aux<-data.frame(cbind(s1[[1]][2,-1],s1[[1]][3,-1],
s1[[2]][2,-1],s1[[2]][3,-1],
s1[[3]][2,-1],s1[[3]][3,-1],
s1[[4]][2,-1],s1[[4]][3,-1],
t(s2),t(s3),t(s4)))
names(aux)<-paste0("v",1:70)
aux$rue<-i
bd<-rbind(bd,aux)
}
View(bd)
setwd("G:\\Mi unidad\\DatosGeoBolivia\\mde\\EstabEducativos")
library(foreign)
dir()
edu<-read.dbf("EstabEducativos.dbf")
View(edu)
edu$COD_SIE
class(edu$COD_SIE)
edu<-read.dbf("EstabEducativos.dbf",as.is = T)
edu$COD_SIE
install.packages("wbstats")
library(wbstats)
library(wbstats)
library(help=wbstats)
#acceso a todos los indicadores disponibles
wbindex<-wbindicators("es")
#acceso a todos los indicadores disponibles
wbindex<-wb_indicators("es")
View(wbindex)
#acceso al catalogo de datos
wbcat<-wbdatacatalog()
View(wbcat)
#búsqueda de indicador
index_edu<-wbsearch(pattern = "education")
#búsqueda de indicador
index_edu<-wb_search(pattern = "education")
View(index_edu)
# ver los países y sus códigos
wbpais<-wbcountries()
# ver los países y sus códigos
wbpais<-wb_countries()
View(wbpais)
?wb
#Comando para extraer los indicadores
wb(country = "BOL",indicator = "NY.GDP.MKTP.CD", startdate = 2000, enddate = 2020)
#Comando para extraer los indicadores
wb_data(country = "BOL",indicator = "NY.GDP.MKTP.CD", startdate = 2000, enddate = 2020)
#Comando para extraer los indicadores
?wb_data(country = "BOL",indicator = "NY.GDP.MKTP.CD", startdate = 2000, enddate = 2020)
#Comando para extraer los indicadores
wb_data(country = "BOL",indicator = "NY.GDP.MKTP.CD", start_date = 2000, end_date = 2020)
#Comando para extraer los indicadores
t1<-wb_data(country = "BOL",indicator = "NY.GDP.MKTP.CD", start_date = 2000, end_date = 2020)
View(t1)
View(index_edu)
t2<-wb_data(country = "BOL",indicator = "SE.SEC.TCHR", start_date = 2000, end_date = 2020)
View(t2)
t2<-wb_data(country = c("BOL","PER"),indicator = "SE.SEC.TCHR", start_date = 2000, end_date = 2020)
View(t2)
install.packages("gtrendsR")
library(gtrendsR)
countries
?gtrends()
res <- gtrends("Coronavirus", geo = c("BO"))
View(res)
bd_cov<-res$interest_over_time
View(bd_cov)
library(ggplot2)
plot(res)
bd_cov$hits<-as.numeric(gsub("<","",bd_cov$hits))
ggplot(bd_cov,aes(date,hits))+geom_line()
#####
res2<-gtrends(c("COVID","Dioxido de Cloro","Vacuna"),geo="BO",time="today 12-m")
View(res2)
plot(res2)
res2$interest_over_time
#install.packages("googleway")
library(googleway)
google_map(key = map_key,location = c(-16.5030161,-68.1292566),zoom = 8) %>% add_traffic()
install.packages("rtweet")
library(rtweet)
library(rtweet)
library(help=rtweet)
?search_tweets()
install.packages("rtweet")
library(rtweet)
library(rtweet)
library(help=rtweet)
?search_tweets()
tw<-search_tweets("estadística")
View(tw)
tw1<-search_tweets("COVID",n=10000)
View(tw1)
m<-matrix(rnorm(10000),100,100)
m
object.size(m)
object.size(m)/10^6
m<-matrix(rnorm(1000000),1000,1000)
sum(m)
system("java -version")
#Habilitando la librería
library(sparklyr)
#versiones disponibles
spark_available_versions()
#versiones instaladas
spark_installed_versions()
sc <- spark_connect(master = "local", version = "3.0.0")
#instalando spark desde R
spark_install("3.0")
#versiones instaladas
spark_installed_versions()
#inicia la sesión
sc <- spark_connect(master = "local", version = "2.4.3")
#versiones instaladas
spark_installed_versions()
#inicia la sesión
sc <- spark_connect(master = "local")
rm(list=ls())
install.packages("ff")
install.packages("ff")
install.packages("ffbase")
setwd("C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata")
setwd("C:\\Users\\ALVARO\\Desktop\\_data\\bigdata")
bd1<-read.csv("200613COVID19MEXICO.csv",sep=",",header=T)
object.size(bd1)/1000000
head(bd1)
library(ff)
library(ffbase)
getwd()
#paso 1: tener un directorio para archivos temporales de ff
system("mkdir ffdf")
setwd("C:\\Users\\ALVARO\\Desktop\\_data\\bigdata")
#paso 1: tener un directorio para archivos temporales de ff
system("mkdir ffdf")
#paso 1: tener un directorio para archivos temporales de ff
system("mkdir ffdf")
#paso 1: tener un directorio para archivos temporales de ff
system("mkdir ffdf")
#paso 2: definir la carpeta temporal
options(fftempdir="C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata\\ffdf")
#paso 2: definir la carpeta temporal
options(fftempdir="C:\\Users\\ALVARO\\Desktop\\_data\\bigdata\\ffdf")
#paso 1: tener un directorio para archivos temporales de ff
system("mkdir ffdf")
#paso 2: definir la carpeta temporal
options(fftempdir="C:\\Users\\ALVARO\\Desktop\\_data\\bigdata\\ffdf")
dir()
bd2<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
next.rows=100000,colClasses=NA,VERBOSE=F)
#paso 1: tener un directorio para archivos temporales de ff
system("mkdir ffdf")
#paso 2: definir la carpeta temporal
options(fftempdir="C:\\Users\\ALVARO\\Desktop\\_data\\bigdata\\ffdf")
bd2<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
next.rows=100000,colClasses=NA,VERBOSE=F)
bd3<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
first.rows=-1,colClasses=NA,VERBOSE=T)
bd4<-read.csv.ffdf(file="200614COVID19MEXICO.csv",sep=",",header=T,
next.rows=10000,colClasses=NA,VERBOSE=T)
object.size(bd1)/1000000 # CSV DE R
object.size(bd2)/1000000 # CSV.FFDF 100000
object.size(bd3)/1000000 # CSV.FFDF TODO
object.size(bd4)/1000000 # CSV.FFDF 1000
90/26.2
bd5<-read.csv.ffdf(file="201115COVID19MEXICO.csv",sep=",",header=T,
next.rows=100000,colClasses=NA,VERBOSE=F)
class(bd1)
class(bd2)
str(bd2)
View(bd2)
View(bd5)
table(bd2$SEXO)
table(bd5$SEXO)
install.packages("tictoc")
library(tictoc)
tic("R")
table(bd1$EDAD,bd1$SEXO)
toc()
tic("ffdf")
table(bd2$EDAD,bd2$SEXO)
toc()
tic("ffdf bd5")
table(bd5$EDAD,bd5$SEXO)
toc()
tic("R")
table(bd1$EDAD,bd1$SEXO)
toc()
tic("ffdf")
table(bd2$EDAD,bd2$SEXO)
toc()
tic("ffdf table")
table.ff(bd2$EDAD,bd2$SEXO)
toc()
?table
library(help=ffbase)
mean(bd2$EDAD)
mean(bd5$EDAD)
min(bd2$EDAD)
max(bd2$EDAD)
mean(bd1$EDAD)
mean(bd2$EDAD)
mean(bd5$EDAD)
mean(bd1$EDAD)
mean(bd2$EDAD)
mean(bd5$EDAD)
median(bd2$EDAD)
median(bd1$EDAD)
?median
?mean
?mean.ff
?mean.ff
?median.ff
#sobre la bd2
library(doBy)
library(dplyr)
res0<-bd1 %>% group_by(PAIS_NACIONALIDAD,SEXO) %>% summarise(mean(EDAD))
View(res0)
bd2df<-as.data.frame.ffdf(bd2)
bd2df<-as.data.frame(bd2)
class(bd2df)
object.size(bd2df)/10^6
object.size(bd1)/10^6
object.size(bd2df)/10^6
bd2df %>% group_by(PAIS_NACIONALIDAD,SEXO) %>% summarise(mean(EDAD))
bd5df<-as.data.frame(bd5)
object.size(bd5df)/10^6
bd2 %>% group_by(PAIS_NACIONALIDAD,SEXO) %>% summarise(mean(EDAD))
#bd2 %>% group_by(PAIS_NACIONALIDAD,SEXO) %>% summarise(mean(EDAD))
summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=bd1)
summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=bd2df)
summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=bd2)
summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=bd2df)
tapply(bd1$EDAD, bd1$PAIS_NACIONALIDAD, mean)
tapply(bd2$EDAD, bd2$PAIS_NACIONALIDAD, mean)
tapply(bd2$EDAD, bd2$PAIS_NACIONALIDAD, mean)
tapply(bd2$EDAD, bd2$PAIS_NACIONALIDAD, mean)
tapply(bd2df$EDAD, bd2$PAIS_NACIONALIDAD, mean)
tapply(bd2df$EDAD, bd2df$PAIS_NACIONALIDAD, mean)
?ffdfdply
res<-ffdfdply(bd2,split=bd2$PAIS_NACIONALIDAD,FUN=function(x){
summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=x)
})
View(res)
class(res)
as.data.frame(res)
res<-ffdfdply(bd2,FUN=function(x){
summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=x)
})
res<-ffdfdply(bd2,split=bd2$SEXO,FUN=function(x){
summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=x)
})
as.data.frame(res)
ss1<-subset(bd1,EDAD>60)
ss2<-subset(bd2,EDAD>60)
ss3<-subset.ffdf(bd2,EDAD>60)
ss4<-subset(bd5,EDAD>60)
object.size(ss1)
object.size(ss1)/10
object.size(ss1)/10^6
class(bd2)
#memoria en R
object.size("a")
memory.size()
memory.limit()
(memory.size()/memory.limit())*100
memory.profile()
class(res)
#guardar objetos ffdf
save.ffdf(res)
rm(res)
load.ffdf("ffdb")
class(bd1)
#convirtiendo a ff
dd<-as.ffdf(bd1)
#convirtiendo a ff
dd<-as.ffdf(bd1)
str(bd1)
#forma lenta
bd1$FECHA_ACTUALIZACION<-as.factor(bd1$FECHA_ACTUALIZACION)
str(bd1)
#forma rapida
i <- sapply(bd1, is.character)
i
bd1[,i] <- lapply(bd1[,i], as.factor)
str(bd1)
dd<-as.ffdf(bd1)
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
