#csv/importaciones
sp_importaciones<-spark_read_csv(sc,
name="importaciones",
path = "C:\\Users\\ALVARO\\Desktop\\db_bolivia\\importaciones\\importaciones_csv")
###########
#esquema
###########
top_rows <- read.csv("C:\\Users\\ALVARO\\Desktop\\db_bolivia\\importaciones\\importaciones_csv\\1993.csv",sep=",", nrows = 5)
names(top_rows)
spec_with_r <- sapply(top_rows, class)
spec_with_r
spec_with_r[6]<-"factor"
spec_with_r
spec_with_r
sp_importaciones2<-spark_read_csv(sc,
name="importaciones2",
path = "C:\\Users\\ALVARO\\Desktop\\db_bolivia\\importaciones\\importaciones_csv",
columns = spec_with_r)
# memoria
object.size(sp_importaciones)
m1<-data.frame(matrix(rnorm(10^7),ncol=20))
object.size(m1)/(10^6)
head(m1)
?copy_to
sp_m1<-copy_to(sc,m1)
load("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-383\\data\\oct20.RData")
object.size(computo)/10^6
sp_computo<-copy_to(sc,computo)
rm(m1)
rm(computo)
sp_eh19p<-copy_to(sc,eh19p)
sp_eh19v<-copy_to(sc,eh19v)
sp_eh19p<-copy_to(sc,eh19p)
aux<-sapply(eh19p,class)
aux
aux<-sapply(eh19v,class)
aux
sp_covid<-spark_read_csv(sc,
name="covid",
path = "C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata\\200614COVID19MEXICO.csv")
sp_covid2<-spark_read_csv(sc,
name="covid2",
path = "C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata\\201115COVID19MEXICO.csv")
library(dplyr)
db_drop_table(sc,"importaciones2")
db_drop_table(sc,"m1")
sp_importaciones
sp_importaciones %>% group_by(GESTION) %>% count()
sp_covid2 %>% count()
eh19v %>% group_by(depto) %>% count()
eh19v %>% group_by(depto) %>% count()
sp_eh19p %>% group_by(depto) %>% count()
sp_eh19v %>% group_by(depto) %>% count()
eh19v %>% group_by(depto) %>% count()
sp_eh19v %>% group_by(depto) %>% count()
spark_disconnect_all()
library(sparklyr)
library(sparklyr)
install.packages("digest")
library(sparklyr)
sc <- spark_connect(master = "local", version = "2.4.3")
library(sparklyr)
spark_disconnect_all()
sc <- spark_connect(master = "local", version = "2.4.3")
library(ggplot2)
# 2. Definir la data (importación)
sp_covid<-spark_read_csv(sc,
name="covid",
path = "C:\\Users\\ALVARO\\Desktop\\db_bolivia\\bigdata\\200614COVID19MEXICO.csv")
sp_importaciones<-spark_read_csv(sc,
name="importaciones",
path = "C:\\Users\\ALVARO\\Desktop\\db_bolivia\\importaciones\\importaciones_csv")
load(url("https://github.com/AlvaroLimber/EST-383/raw/master/data/oct20.RData"))
computo$Elección
pvbol<-computo %>% filter(Elección=="Presidente y Vicepresidente")
computo$Elección
pvbol<-computo %>% rename(Elección=eleccion) %>% filter(eleccion=="Presidente y Vicepresidente")
library(dplyr)
pvbol<-computo %>% rename(Elección=eleccion) %>% filter(eleccion=="Presidente y Vicepresidente")
names(computo)
?rename
pvbol<-computo %>% rename(eleccion=Elección) %>% filter(eleccion=="Presidente y Vicepresidente")
sp_pvbol<-copy_to(sc,pvbol)
# 3. Exploración de los datos / ("Modelado")
sdf_describe(pvbol)
# 3. Exploración de los datos / ("Modelado")
names(pvbol)
names(sp_pvbol)
glimpse(sp_pvbol)
glimpse(sp_importaciones)
sdf_describe(sp_importaciones)
sdf_describe(sp_pvbol)
sdf_describe(sp_pvbol,c("CC"))
summary(pvbol$CC)
summary(sp_pvbol)
###########################################################
# cargar el pvbol
sp_pvbol<-copy_to(sc,pvbol,name="elecciones")
sp_importaciones %>% group_by(ADUANA) %>% count()
sp_importaciones %>% group_by(DESADU) %>% count()
sp_importaciones %>% group_by(DESADU) %>% count()
sp_importaciones %>% group_by(DESADU) %>% count() %>% collect()
a1<-sp_importaciones %>% group_by(DESADU) %>% count()
a1
View(a1)
a1<-sp_importaciones %>% group_by(DESADU) %>% count() %>% collect()
View(a1)
sp_a2<-sp_importaciones %>% group_by(DESADU) %>% count() %>% compute("a2") # guardar la salida en Spark
sp_importaciones %>% group_by(GESTION,DESADU) %>% count()
sp_importaciones %>% group_by(DESADU, GESTION) %>% count()
sp_importaciones %>% group_by(GESTION,NANDINA,DESNAN) %>% summarise(sum(KILBRU))
sp_importaciones %>% group_by(GESTION,NANDINA,DESNAN) %>% summarise(peso=sum(KILBRU,na.rm=T))
sp_importaciones %>% group_by(GESTION,NANDINA,DESNAN) %>% summarise(peso_ton=sum(KILBRU,na.rm=T)/1000)
sp_importaciones %>% group_by(GESTION,NANDINA,DESNAN) %>% summarise(peso_ton=sum(KILBRU,na.rm=T)/1000) %>% arrange(desc(peso_ton))
sp_importaciones %>% group_by(GESTION,NANDINA,DESNAN) %>% summarise(peso_ton=sum(KILBRU,na.rm=T)/1000) %>% arrange(GESTION,desc(peso_ton))
t1<-sp_importaciones %>% group_by(GESTION,NANDINA,DESNAN) %>% summarise(peso_ton=sum(KILBRU,na.rm=T)/1000) %>% arrange(GESTION,desc(peso_ton)) %>% collect()
View(t1)
sp_importaciones %>% count()
library(DBI)
library(DBI)
library(help=DBI)
dbGetQuery(sc,"Select * from importaciones limit 5")
aux<-dbGetQuery(sc,"Select * from importaciones limit 5")
lm(FOB~PAG,data=sp_importaciones)
lm(FOB~PAG,data=sp_importaciones)
?ml_linear_regression()
sp_importaciones %>% ml_linear_regression(FOB~PAG)
mod1<-sp_importaciones %>% select(FOB,PAG) %>% ml_linear_regression(FOB~.)
# Final. Cerrar la conexión a Spark
spark_disconnect()
# Final. Cerrar la conexión a Spark
spark_disconnect_all()
# Final. Cerrar la conexión a Spark
spark_disconnect_all()
# Final. Cerrar la conexión a Spark
spark_disconnect_all()
# 1. Conexión con Spark
sc <- spark_connect(master = "local", version = "2.4.3")
sp_importaciones<-spark_read_csv(sc,
name="importaciones",
path = "C:\\Users\\ALVARO\\Desktop\\db_bolivia\\importaciones\\importaciones_csv")#carpeta
mod1<-sp_importaciones %>% select(FOB,PAG) %>% ml_linear_regression(FOB~.)
mod1
ggplot(sp_importaciones,aes(DESDEPTO))+geom_bar()
ggplot(sp_importaciones,aes(DESDEPTO))+geom_bar()+facet_wrap(~GESTION)
ggplot(sp_importaciones,aes(KILBRU))+geom_histogram()+facet_wrap(~GESTION)
ggplot(sp_importaciones,aes(KILBRU))+geom_histogram()
library(dbplot)
sp_importaciones %>% dbplot_histogram(KILBRU)
sp_importaciones %>% dbplot_histogram(FOB)
sp_importaciones %>% dbplot_bar(DESDEPTO)
sp_importaciones %>% dbplot_bar(DESDEPTO)
ggplot(sp_importaciones,aes(DESDEPTO))+geom_bar()
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages(c("backports", "betareg", "BH", "bigparallelr", "brio", "broom", "circlize", "cli", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "DescTools", "diffobj", "distill", "dplyr", "DT", "expm", "fansi", "fastmap", "flextable", "forcats", "formattable", "gdtools", "gert", "ggfittext", "ggrepel", "ggridges", "ggthemes", "git2r", "hexbin", "hms", "htmltools", "httpuv", "insight", "jtools", "knitr", "leaflet", "magick", "mathjaxr", "matrixStats", "memoise", "mice", "moonBook", "multcomp", "pixmap", "plotly", "plotrix", "pracma", "prettydoc", "pROC", "quantreg", "rappdirs", "Rcpp", "RcppArmadillo", "repr", "reprex", "rgdal", "rgl", "rlang", "rms", "robustbase", "sf", "shiny", "shinyWidgets", "showtext", "sjmisc", "sp", "SQUAREM", "sysfonts", "systemfonts", "tibble", "tidytext", "tinytex", "treemapify", "UCSCXenaTools", "usethis", "waldo", "withr", "xfun"))
install.packages(c("backports", "betareg", "BH", "bigparallelr", "brio", "broom", "circlize", "cli", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "DescTools", "diffobj", "distill", "dplyr", "DT", "expm", "fansi", "fastmap", "flextable", "forcats", "formattable", "gdtools", "gert", "ggfittext", "ggrepel", "ggridges", "ggthemes", "git2r", "hexbin", "hms", "htmltools", "httpuv", "insight", "jtools", "knitr", "leaflet", "magick", "mathjaxr", "matrixStats", "memoise", "mice", "moonBook", "multcomp", "pixmap", "plotly", "plotrix", "pracma", "prettydoc", "pROC", "quantreg", "rappdirs", "Rcpp", "RcppArmadillo", "repr", "reprex", "rgdal", "rgl", "rlang", "rms", "robustbase", "sf", "shiny", "shinyWidgets", "showtext", "sjmisc", "sp", "SQUAREM", "sysfonts", "systemfonts", "tibble", "tidytext", "tinytex", "treemapify", "UCSCXenaTools", "usethis", "waldo", "withr", "xfun"))
6+9
45893475834-54985734853
9+3
8*7
7/0
StartDate <- as.Date("2020-08-10")
EndDate <- as.Date("2020-12-26")
myDays <- seq(StartDate , EndDate, by = "day")
excludeDays <- c("martes","jueves","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
StartDate <- as.Date("2021-02-01")
EndDate <- as.Date("2021-11-01")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("lunes","miércoles","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
StartDate <- as.Date("2021-02-01")
EndDate <- as.Date("2021-11-10")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("lunes","miércoles","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays
myWeekDays[-c(49,50)]
myWeekDays<-myWeekDays[-c(49,50)]
StartDate <- as.Date("2021-02-01")
EndDate <- as.Date("2021-11-10")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("lunes","miércoles","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays<-myWeekDays[-c(49,50)]
EndDate <- as.Date("2021-11-11")
StartDate <- as.Date("2021-02-01")
EndDate <- as.Date("2021-11-11")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("lunes","miércoles","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays<-myWeekDays[-c(49,50)]
library(readxl)
StartDate <- as.Date("2021-02-01")
EndDate <- as.Date("2021-11-11")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("lunes","miércoles","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays<-myWeekDays[-c(49,50)]
library(readxl)
aux<-read_excel("G:\\Mi unidad\\contenido_materias\\contenido2020.xlsx",sheet = "EST228")
aux<-cbind(aux,myWeekDays)
names(aux)[4]<-"Fecha"
knitr::kable(aux)
67+98
56-4564
123+456
123+456
4657*89
12/34
2443-3434
123+456
4657*89
12/34
2443-3434
123+456
123+456
4657*89
12/34
2443-3434
?mean
?lm
123*56 ; 435+3544 ; 454+56
NA
HO
NA
1/0
#este es un comentario
```
#este es un comentario
```
#este es un comentario
1+4;78+89
?mean # comando para pedir ayuda
5>6
5>2
3^5
3**5
5>6
(5>6)
!(5>6)
2^2 == 4 # igualdad
(5>6) & (2^2==4) # y lógico
(5>6) | (2^2==4) # ó lógico
2^2 != 4 # desigualdad
(5>6) && (2^2==4) # y lógico
(5>6) || (2^2==4) # ó lógico
5 >= 5
5 <= 5
5 =< 5
x<-5
y=10
15->z
x1<<-20
x2<-"Hola"
x3<-hola
x3<-'hola'
x*y^z
z*y^x
x1+z
x1*x3
(4>5)
x4<-(4>5)
x5<-(y>x^2)
y1<-50
y2<-"hola"
y3<-(56>60)
y4<-NA
y5<-NULL
class(y1)
class(y2)
class(y3)
class(y4)
class(y5)
typeof(y1)
typeof(y1)
typeof(y2)
typeof(y3)
typeof(y4)
typeof(y5)
class(y1)
typeof(y1)
as.numeric("hola")
z<-"12314234"
class(z)
class(z)
as.numeric(z)
z2<-as.numeric(z)
class(z2)
rm(y)
rm(y1,y2,y3,y4)
rm(w)
# listando los objetos en memoria
ls()
rm(ls())
# listando los objetos en memoria
ls()
rm(ls())
?rm(ls())
ls()
rm(list=ls())
x<-1
y<-"hola"
i<-TRUE
j<-FALSE
w<-F
# definición
x1<-c(2,4,6)
x2<-c(1,2,3,4,7,9,4,2)
x3<-c("hola","chau","adios","hola")
x4<-c(T,T,T,F,F,F,F,T,F,T,F,F,F)
x5<-c(1,2,3,T,T,"Hola")
x5
class(x5)
typeof(x5)
x6<-c(1,2,3,T,T)
x6
x6<-c(1,2,3,T,T,F,F)
x6
# operaciones con vectores
x1
# operaciones con vectores
x1+x1
x1+x2
x1**2
x1/x1
x2>5
log(x2)
exp(x2)
sqrt(x2)
?log(x2) # logaritmo
log(x2) # logaritmo
log(x2) # logaritmo
exp(x2) # exponencial
sqrt(x2) # raiz cuadrada
2^x2
x2
2/x1
# generando vectores
1:10
1:10000
# generando vectores
v1<-1:10
v2<-1:10000
sum(v1) #sumar
sum(v2) #sumar
100:1
v4<-99:0
v4
?seq
seq(1,100,2)
seq(0,1,0,01)
seq(0,1,0.01)
v6<-seq(0,1,0.01)
v6
seq(by=10,to=100,from=-20)
seq(-20,100,10)
seq(10,100,-20)
seq(by=10,to=100,from=-20)
seq(-20,100,10)
rep(1,100)
rep(c(1,2,3),10)
rep(c("hola","cómo","estas","?"),10)
v7<-rep(1,100) # repetir algo
v8<-rep(c(1,2,3),10)
v9<-rep(c("hola","cómo","estas","?"),10)
length(v8)
length(v6) # conocer el tamaño del vector
# vectores estadísticos, generación de variables aleatorias
runif(100)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
runif(100,10,20)
runif(100,10,20)
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
runif(100,10,20)
runif(100,10,20)
runif(100,10,20)
runif(100,10,20)
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
x<-runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
x<-runif(100,10,20)
mean(x)
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
x<-runif(100,10,20)
mean(x)
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
x<-runif(100,10,20)
x
# vectores estadísticos, generación de variables aleatorias
set.seed(456476565354)
# vectores estadísticos, generación de variables aleatorias
set.seed(45647656)
x<-runif(100,10,20)
x
# vectores estadísticos, generación de variables aleatorias
set.seed(45647656)
x<-runif(100,10,20)
x
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
x<-runif(100,10,20)
mean(x)
# vectores estadísticos, generación de variables aleatorias
set.seed(12347)
x<-runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
set.seed(12345)
x<-runif(100,10,20)
# vectores estadísticos, generación de variables aleatorias
set.seed(1548)
x<-runif(100,10,20)
mean(x)
# vectores estadísticos, generación de variables aleatorias
set.seed(1234)
x<-runif(100,10,20)
mean(x)
x
round(x,1)
round(x,2)
round(x,10)
round(x,0)
round(x,10)
z<-round(x,10)
z
View(z)
z[1]
View(z)
rnorm(100,10,5)
y<-rnorm(100,10,5)
hist(y)
y<-rnorm(100000,10,5)
hist(y)
?rbinom()
