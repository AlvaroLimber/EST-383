[["index.html", "Big Data en R EST-383 Prefacio Audiencia Estructura del libro Software y acuerdos Bases de datos Agradecimiento", " Big Data en R EST-383 Alvaro Chirino Gutierrez 2021-05-04 Prefacio Este documento de Alvaro Chirino esta bajo la licencia de Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Audiencia El libro fue diseñado originalmente para los estudiantes de la materia de Programación Estadística I, una materia optativa del pregrado de la carrera de Estadística de la Universidad Mayor de San Andres. Este documento representa un primer acercamiento a los estudiantes de estadistica al software R y al mundo del Big Data. Estructura del libro El libro inluye 5 capitulos, estos son: Introducción a R Scraping Web en R Introducción al Big Data Big Data en R R y Spark Software y acuerdos sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19042) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=Spanish_Bolivia.1252 ## [2] LC_CTYPE=Spanish_Bolivia.1252 ## [3] LC_MONETARY=Spanish_Bolivia.1252 ## [4] LC_NUMERIC=C ## [5] LC_TIME=Spanish_Bolivia.1252 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets ## [6] methods base ## ## other attached packages: ## [1] rvest_1.0.0.9000 foreign_0.8-81 dplyr_1.0.5 ## ## loaded via a namespace (and not attached): ## [1] bslib_0.2.4 compiler_4.0.5 ## [3] pillar_1.5.1 jquerylib_0.1.3 ## [5] highr_0.8 tools_4.0.5 ## [7] digest_0.6.27 jsonlite_1.7.2 ## [9] evaluate_0.14 lifecycle_1.0.0 ## [11] tibble_3.1.0 pkgconfig_2.0.3 ## [13] rlang_0.4.10 cli_2.4.0 ## [15] DBI_1.1.1 rstudioapi_0.13 ## [17] curl_4.3 yaml_2.2.1 ## [19] xfun_0.22 stringr_1.4.0 ## [21] httr_1.4.2 knitr_1.31 ## [23] xml2_1.3.2 generics_0.1.0 ## [25] vctrs_0.3.7 sass_0.3.1 ## [27] tidyselect_1.1.0 glue_1.4.2 ## [29] R6_2.5.0 fansi_0.4.2 ## [31] rmarkdown_2.7 bookdown_0.21 ## [33] selectr_0.4-2 purrr_0.3.4 ## [35] magrittr_2.0.1 htmltools_0.5.1.1 ## [37] ellipsis_0.3.1 assertthat_0.2.1 ## [39] utf8_1.2.1 stringi_1.5.3 ## [41] crayon_1.4.1 Bases de datos En este documento se emplearan 4 bases de datos del contecto Boliviano: Encuesta a Hogares 2019 y 2019. Vivienda y Personas Encuesta de Demografía y Salud 1989 - 2008 Encuesta de Niños, niñas y adolescentes 2016 Computo oficial de las elecciones del 20 de Octubre de 2019 Bases de datos de contagios, muertes y recuperados del COVID-19 del Johns Hopkins Institute. Estas bases de datos se encuentran disponibles en formato \\(.RData\\) en el repositorio de Github del texto. Agradecimiento Eponine "],["introR.html", "Chapter 1 Introducción a R 1.1 ¿Qué es R? 1.2 R Markdown 1.3 R básico 1.4 Tipos de estructuras 1.5 Indexación 1.6 Loops y condiciones 1.7 Crear funciones en R. 1.8 Importación de datos 1.9 Exportar la base de datos 1.10 Dataframe y exploración 1.11 Estadística descriptiva 1.12 Inferencia en R 1.13 Gráficos de origen 1.14 ggplot 1.15 Flexdashboard 1.16 Shiny 1.17 Ejercicios Propuestos", " Chapter 1 Introducción a R R es un software de libre distribución 1.1 ¿Qué es R? Comparación perfecta ### Algo de historia de R R es el hermano de S S es un lenguaje de programación estadística desarrollado por John Chambers de Bell Labs El objetivo de S era convertir las ideas en el software, de forma rápida y fielmente S fue creado en 1976 y se reinvento 1988 introduciendo muchos cambios En 1993, StatSci (fabricante de S-Plus) adquieren licencia exclusiva a S S-Plus integra S con una interfaz gráfica de usuario agradable y pleno apoyo al cliente R Fue creado por Ross Ihaka y Robert Gentleman de la University of Auckland, New Zealand 1.1.1 Acerca de R El proyecto R inicio en 1991 R apareció por primera vez en 1996 como un software de código abierto! Altamente personalizable a través de paquetes La comunidad R, se basa en el poder de la colaboración con miles de paquetes de libre disposición Existen muchas interfaces gráficas de usuario de R libres y comerciales (por ejemplo R Studio y Revolución) 1.1.2 ¿Qué es R? R es un conjunto integrado de servicios de software para la manipulación de datos, cálculo y representación gráfica. Incluye: instalación sencilla y un fácil almacenamiento de datos un conjunto de operadores para los cálculos en arrays, particularmente en las matrices facilidad en los gráficos y el análisis de datos y bien desarrollado, lenguaje de programación sencillo y eficaz que incluye condicionales, bucles, funciones recursivas definidos por el usuario. Altamente intuitivo A pesar de ser libre y de código abierto, R es ampliamente utilizado por los analistas de datos dentro de las empresas y el mundo académico. (R en the NY Times) Ver NY Times artículo. 1.1.3 Algunas referencias aRrgh: a newcomers (angry) guide to R by Tim Smith and Kevin Ushey Introductory Statistics with by Peter Dalgaard R tarjeta de comandos http://cran.r-project.org/doc/contrib/Short-refcard.pdf Tutorial de R http://www.cyclismo.org/tutorial/R/ R project and Bioconductor Mas avanzado: Hadley Wickhams book 1.1.4 RStudio RStudio es un ambiente libre y abierto de desarrollo de código integrado. multiplataforma El resaltado de sintaxis, completado de código, y la sangría inteligente gestionar fácilmente múltiples directorios de trabajo Flexible para el manejo de gráficos Integrado con Knitr Integrado con Git 1.1.5 Instalación R-CRAN https://cran.r-project.org/ (elija el Sistema operativo, descargue y siguiente, siguiente) R-Studio https://www.rstudio.com/ (elija el Sistema operativo, descargue y siguiente, siguiente) Nota: Para actualizar ambos paquetes: descargue la nueva versión e instale (las librerías no sufren cambios). 1.2 R Markdown R Markdown se introdujo por primera vez en el paquete knitr a principios de 2012. La idea era incrustar fragmentos de código (de R u otros) en los documentos de Markdown. De hecho, knitr soportó varios lenguajes de autoría desde el principio además de Markdown, incluidos LaTeX, HTML, AsciiDoc, reStructuredText y Textile. Markdown se ha convertido en el formato de documento más popular. La simplicidad de Markdown se destaca claramente entre estos formatos de documentos. 1.2.1 Instalación install.packages(&#39;rmarkdown&#39;) # Si se prefiere la versión en desarrollo if (!requireNamespace(&quot;devtools&quot;)) install.packages(&#39;devtools&#39;) devtools::install_github(&#39;rstudio/rmarkdown&#39;) Si el objetivo es usar Markdown para generar documentos PDF se necesita instalar Latex. Existen cheatsheets utiles para usar markdown, como: cheatsheets 1.2.2 YAML Header Al inicio del archivo y entre las lineas  --- title: Mi documento author: Juan Perez date: Marzo 22, 20220 output: html_document --- 1.2.3 Sintaxis básica Énfasis sobre el texto, *italic* **bold** _italic_ __bold__ Secciones, # Header 1 ## Header 2 ### Header 3 Items (viñetas) no ordenadas y ordenadas, * Item 1 * Item 2 + Item 2a + Item 2b 1. Item 1 2. Item 2 3. Item 3 + Item 3a + Item 3b Palabras clave con referencias web, [linked phrase](http://example.com) Imágenes simples o con titulo, ![](http://example.com/logo.png) ![optional caption text](figures/img.png) Blockquotes Its always better to give than to receive. A friend once said: &gt; It&#39;s always better to give than to receive. Ecuaciones en linea y en párrafo, En linea \\(\\sum_i{x^2}\\) o en párrafo: \\[\\sum_i{x^2}\\] $equation$ $$ equation $$ 1.2.4 Tipos de documentos beamer_presentation github_document html_document ioslides_presentation latex_document md_document odt_document pdf_document powerpoint_presentation rtf_document slidy_presentation word_document 1.2.5 Chunks Los chunks son entornos que permiten incluir código en R dentro de las distintos tipos de documentos que genera Rmarkdown, los chunks inician con ```{r} y termina con ```, también es posible introducir chunks en linea con el texto, esto se logra introduciendo Texto ... `r &lt;code&gt;` ... texto La parte {r} del chunk sirve para introducir las distintas opciones que va a contener ese chunk, las opciones disponibles son: echo (default = TRUE), muestra el código del chunk en la salida del documento eval (default = TRUE), corre el código del chunk message (default = TRUE), muestra los mensajes que genera el chunk Existen funciones útiles para mejorar las salidas de tablas, tales como xtable y kable de la librería knitr. 1.3 R básico R es una calculadora demasiado grande 123+456 ## [1] 579 4657*89 ## [1] 414473 12/34 ## [1] 0.3529412 2443-3434 ## [1] -991 1.3.1 Lógica de los comandos en R Como entiende R los comandos comando(argumentos, argumentos, ) Advertencia: No es posible resumir un comando R distingue mayúscula de minúscula Siempre cerrar los paréntesis R entiende el orden de los argumentos o su nombre clave Comando para pedir ayuda ?mean # comando para pedir ayuda ?lm Escribir varios comandos en una sola línea. 123*56 ; 435+3544 ; 454+56 ## [1] 6888 ## [1] 3979 ## [1] 510 #este es un comentario 1+4;78+89 ## [1] 5 ## [1] 167 1.3.2 Palabras reservadas y simbolos especiales de R NA: datos perdidos NULL: datos nulos Inf -Inf: Infinito #: comentario en el código TRUE (T), FALSE (F): valores lógicos NaN: not a number ?: Ayuda x, ,x + y, x - y ,x * y ,x / y ,x ^ y (**),x %% y (mod) ,x %/% y (div int) ! x, .x &amp; y ,x &amp;&amp; y ,x | y ,x || y , &lt;, &gt;=, &lt;= 1.3.3 Símbolos Lógicos !(5&gt;6) # negación ## [1] TRUE 2^2 == 4 # igualdad ## [1] TRUE 2^2 != 4 # desigualdad ## [1] FALSE (5&gt;6) &amp; (2^2==4) # y lógico ## [1] FALSE (5&gt;6) | (2^2==4) # ó lógico ## [1] TRUE (5&gt;6) &amp;&amp; (2^2==4) # y lógico ## [1] FALSE (5&gt;6) || (2^2==4) # ó lógico ## [1] TRUE 5 &gt;= 5 ## [1] TRUE 5 &lt;= 5 ## [1] TRUE 1.3.4 Asignación o creación de objetos (estructuras, variables) x&lt;-5 y=10 15-&gt;z x1&lt;&lt;-20 x2&lt;-&quot;Hola&quot; x3&lt;-&#39;hola&#39; z*y^x ## [1] 1500000 x1+z ## [1] 35 x4&lt;-(4&gt;5) x5&lt;-(y&gt;x^2) Trate de usar nombres significativos! Miren esto: Hadley Wickhams book Naming 1.3.5 Clases en R y1&lt;-50 y2&lt;-&quot;hola&quot; y3&lt;-(56&gt;60) y4&lt;-NA y5&lt;-NULL class(y1) ## [1] &quot;numeric&quot; class(y2) ## [1] &quot;character&quot; class(y3) ## [1] &quot;logical&quot; class(y4) ## [1] &quot;logical&quot; class(y5) ## [1] &quot;NULL&quot; typeof(y1) ## [1] &quot;double&quot; typeof(y2) ## [1] &quot;character&quot; typeof(y3) ## [1] &quot;logical&quot; typeof(y4) ## [1] &quot;logical&quot; typeof(y5) ## [1] &quot;NULL&quot; z&lt;-&quot;12314234&quot; class(z) ## [1] &quot;character&quot; z2&lt;-as.numeric(z) class(z2) ## [1] &quot;numeric&quot; # as.character 1.3.6 Algunas comandos adicionales rm(y) # eliminar objetos rm(y1,y2,y3,y4) # listando los objetos en memoria ls() ## [1] &quot;aux&quot; &quot;bd&quot; &quot;bdj&quot; &quot;bdv&quot; &quot;edu&quot; &quot;eh19p&quot; ## [7] &quot;eh19v&quot; &quot;i&quot; &quot;rue&quot; &quot;s1&quot; &quot;s2&quot; &quot;s3&quot; ## [13] &quot;s4&quot; &quot;ue&quot; &quot;www&quot; &quot;x&quot; &quot;x1&quot; &quot;x2&quot; ## [19] &quot;x3&quot; &quot;x4&quot; &quot;x5&quot; &quot;y5&quot; &quot;z&quot; &quot;z2&quot; # remover todos los objetos en memoria rm(list=ls()) 1.4 Tipos de estructuras 1.4.1 Homogéneas Scalar: un único valor x&lt;-1 y&lt;-&quot;hola&quot; i&lt;-TRUE j&lt;-FALSE w&lt;-F Vectores: Colección de valores simples. Los vectores en R son vectores columna # definición x1&lt;-c(2,4,6) x2&lt;-c(1,2,3,4,7,9,4,2) x3&lt;-c(&quot;hola&quot;,&quot;chau&quot;,&quot;adios&quot;,&quot;hola&quot;) x4&lt;-c(T,T,T,F,F,F,F,T,F,T,F,F,F) x5&lt;-c(1,2,3,T,T,&quot;Hola&quot;) x6&lt;-c(1,2,3,T,T,F,F) # operaciones con vectores x1+x1 ## [1] 4 8 12 x1+x2 # mal ejemplo ## Warning in x1 + x2: longitud de objeto mayor no es ## múltiplo de la longitud de uno menor ## [1] 3 6 9 6 11 15 6 6 x1**2 ## [1] 4 16 36 x1/x1 ## [1] 1 1 1 x2&gt;5 ## [1] FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE log(x2) # logaritmo ## [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.9459101 ## [6] 2.1972246 1.3862944 0.6931472 exp(x2) # exponencial ## [1] 2.718282 7.389056 20.085537 54.598150 ## [5] 1096.633158 8103.083928 54.598150 7.389056 sqrt(x2) # raíz cuadrada ## [1] 1.000000 1.414214 1.732051 2.000000 2.645751 ## [6] 3.000000 2.000000 1.414214 2^x2 ## [1] 2 4 8 16 128 512 16 4 2/x1 ## [1] 1.0000000 0.5000000 0.3333333 # generando vectores v1&lt;-1:10 v2&lt;-1:10000 sum(v2) #sumar ## [1] 50005000 v3&lt;-100:1 v4&lt;-99:0 v5&lt;-seq(1,100,2) v6&lt;-seq(0,1,0.01) seq(by=10,to=100,from=-20)# anotando el nombre de los argumentos ## [1] -20 -10 0 10 20 30 40 50 60 70 80 90 ## [13] 100 seq(-20,100,10) # respetando el orden de los argumentos ## [1] -20 -10 0 10 20 30 40 50 60 70 80 90 ## [13] 100 v7&lt;-rep(1,100) # repetir algo v8&lt;-rep(c(1,2,3),10) v9&lt;-rep(c(&quot;hola&quot;,&quot;cómo&quot;,&quot;estas&quot;,&quot;?&quot;),10) length(v8) # conocer el tamaño del vector ## [1] 30 length(v6) # conocer el tamaño del vector ## [1] 101 # vectores estadísticos, generación de variables aleatorias set.seed(1234) x&lt;-runif(100,10,20) mean(x) ## [1] 14.37497 x ## [1] 11.13703 16.22299 16.09275 16.23379 18.60915 ## [6] 16.40311 10.09496 12.32551 16.66084 15.14251 ## [11] 16.93591 15.44975 12.82734 19.23433 12.92316 ## [16] 18.37296 12.86223 12.66821 11.86723 12.32226 ## [21] 13.16612 13.02693 11.59046 10.39996 12.18800 ## [26] 18.10599 15.25698 19.14658 18.31345 10.45770 ## [31] 14.56091 12.65187 13.04672 15.07307 11.81096 ## [36] 17.59671 12.01248 12.58810 19.92150 18.07352 ## [41] 15.53334 16.46406 13.11824 16.21819 13.29770 ## [46] 15.01997 16.77095 14.84991 12.43929 17.65460 ## [51] 10.73780 13.09687 17.17272 15.04546 11.52999 ## [56] 15.03933 14.93961 17.51200 11.74650 18.48392 ## [61] 18.64834 10.41857 13.17182 10.13750 12.39026 ## [66] 17.06495 13.08095 15.08548 10.51647 15.64570 ## [71] 11.21480 18.92836 10.14627 17.83121 10.89961 ## [76] 15.19190 13.84267 10.70052 13.20644 16.68495 ## [81] 19.26400 14.71910 11.42615 15.44270 11.96175 ## [86] 18.98580 13.89500 13.10871 11.60029 18.96186 ## [91] 11.66394 19.00425 11.34078 11.31614 11.05288 ## [96] 15.11584 13.00199 10.26717 13.09647 17.42120 z&lt;-round(x,10) y&lt;-rnorm(100000,10,5) hist(y) Matrices A&lt;-matrix(c(1,2,3,4),2,2) matrix(c(1,2,3,4),2,2,byrow=T) ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 B&lt;-A&gt;=2 B ## [,1] [,2] ## [1,] FALSE TRUE ## [2,] TRUE TRUE matrix(c(&quot;Hola&quot;,&quot;como&quot;, &quot;estan&quot;,&quot;chau&quot;),2,2) ## [,1] [,2] ## [1,] &quot;Hola&quot; &quot;estan&quot; ## [2,] &quot;como&quot; &quot;chau&quot; matrix(c(&quot;Hola&quot;,1,2,3),2,2) ## [,1] [,2] ## [1,] &quot;Hola&quot; &quot;2&quot; ## [2,] &quot;1&quot; &quot;3&quot; matrix(1:10,2,5) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 3 5 7 9 ## [2,] 2 4 6 8 10 matrix(1:10,5,2) ## [,1] [,2] ## [1,] 1 6 ## [2,] 2 7 ## [3,] 3 8 ## [4,] 4 9 ## [5,] 5 10 matrix(1:10,5,5) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 6 1 6 1 ## [2,] 2 7 2 7 2 ## [3,] 3 8 3 8 3 ## [4,] 4 9 4 9 4 ## [5,] 5 10 5 10 5 # funciones para crear otras matrices diag(1,5,5) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 0 0 0 0 ## [2,] 0 1 0 0 0 ## [3,] 0 0 1 0 0 ## [4,] 0 0 0 1 0 ## [5,] 0 0 0 0 1 diag(1:5,5,5) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 0 0 0 0 ## [2,] 0 2 0 0 0 ## [3,] 0 0 3 0 0 ## [4,] 0 0 0 4 0 ## [5,] 0 0 0 0 5 # Matriz inversa C&lt;-matrix(c(2,5,3,7),2,2) solve(C) ## [,1] [,2] ## [1,] -7 3 ## [2,] 5 -2 det(C) ## [1] -1 # operaciones con matrices A+C ## [,1] [,2] ## [1,] 3 6 ## [2,] 7 11 A-C ## [,1] [,2] ## [1,] -1 0 ## [2,] -3 -3 A*C # elemento a elemento ## [,1] [,2] ## [1,] 2 9 ## [2,] 10 28 A %*% C # Multiplicación matricial ## [,1] [,2] ## [1,] 17 24 ## [2,] 24 34 t(C)# transpuesta ## [,1] [,2] ## [1,] 2 5 ## [2,] 3 7 D&lt;-C %*% t(C) # Simétrica C %*% solve(C) # Inversa ## [,1] [,2] ## [1,] 1 -8.881784e-16 ## [2,] 0 1.000000e+00 # Desc. Matriz eigen(D) ## eigen() decomposition ## $values ## [1] 86.98850423 0.01149577 ## ## $vectors ## [,1] [,2] ## [1,] 0.3864358 -0.9223163 ## [2,] 0.9223163 0.3864358 svd(D) ## $d ## [1] 86.98850423 0.01149577 ## ## $u ## [,1] [,2] ## [1,] -0.3864358 -0.9223163 ## [2,] -0.9223163 0.3864358 ## ## $v ## [,1] [,2] ## [1,] -0.3864358 -0.9223163 ## [2,] -0.9223163 0.3864358 qr(D) ## $qr ## [,1] [,2] ## [1,] -33.6154726 -80.23091122 ## [2,] 0.9221944 0.02974821 ## ## $rank ## [1] 2 ## ## $qraux ## [1] 1.38672668 0.02974821 ## ## $pivot ## [1] 1 2 ## ## attr(,&quot;class&quot;) ## [1] &quot;qr&quot; dim(D) ## [1] 2 2 Arrays (Generalización) array(1:27,c(3,3,3)) ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 10 13 16 ## [2,] 11 14 17 ## [3,] 12 15 18 ## ## , , 3 ## ## [,1] [,2] [,3] ## [1,] 19 22 25 ## [2,] 20 23 26 ## [3,] 21 24 27 array(1:81,c(3,3,3,3)) ## , , 1, 1 ## ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## ## , , 2, 1 ## ## [,1] [,2] [,3] ## [1,] 10 13 16 ## [2,] 11 14 17 ## [3,] 12 15 18 ## ## , , 3, 1 ## ## [,1] [,2] [,3] ## [1,] 19 22 25 ## [2,] 20 23 26 ## [3,] 21 24 27 ## ## , , 1, 2 ## ## [,1] [,2] [,3] ## [1,] 28 31 34 ## [2,] 29 32 35 ## [3,] 30 33 36 ## ## , , 2, 2 ## ## [,1] [,2] [,3] ## [1,] 37 40 43 ## [2,] 38 41 44 ## [3,] 39 42 45 ## ## , , 3, 2 ## ## [,1] [,2] [,3] ## [1,] 46 49 52 ## [2,] 47 50 53 ## [3,] 48 51 54 ## ## , , 1, 3 ## ## [,1] [,2] [,3] ## [1,] 55 58 61 ## [2,] 56 59 62 ## [3,] 57 60 63 ## ## , , 2, 3 ## ## [,1] [,2] [,3] ## [1,] 64 67 70 ## [2,] 65 68 71 ## [3,] 66 69 72 ## ## , , 3, 3 ## ## [,1] [,2] [,3] ## [1,] 73 76 79 ## [2,] 74 77 80 ## [3,] 75 78 81 1.4.2 Heterogéneas Estas estructuras permiten el uso de diferentes tipos de clases u objetos. Dataframes (Bases de datos) Tiene una estructura similar a una matriz, donde se define que las filas corresponden a observaciones/sujetos y las columnas son variables. #encuesta en la sala de clases id&lt;-1:8 name&lt;-c(&quot;adriana&quot;,&quot;anahi&quot;,&quot;miguel&quot;,&quot;rayner&quot;,&quot;rebeca&quot;,&quot;sergio&quot;,&quot;vania&quot;,&quot;yoselin&quot;) mujer&lt;-c(1,1,0,0,1,0,1,1) bd&lt;-data.frame(id,name,mujer) bd ## id name mujer ## 1 1 adriana 1 ## 2 2 anahi 1 ## 3 3 miguel 0 ## 4 4 rayner 0 ## 5 5 rebeca 1 ## 6 6 sergio 0 ## 7 7 vania 1 ## 8 8 yoselin 1 dim(bd) ## [1] 8 3 str(bd)# estructura del objeto ## &#39;data.frame&#39;: 8 obs. of 3 variables: ## $ id : int 1 2 3 4 5 6 7 8 ## $ name : chr &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## $ mujer: num 1 1 0 0 1 0 1 1 # incorporando variables bd$edad&lt;-round(runif(8,19,25),0) bd ## id name mujer edad ## 1 1 adriana 1 22 ## 2 2 anahi 1 22 ## 3 3 miguel 0 24 ## 4 4 rayner 0 20 ## 5 5 rebeca 1 23 ## 6 6 sergio 0 21 ## 7 7 vania 1 24 ## 8 8 yoselin 1 21 Listas Las listas en R son de los objetos más poderosos que tiene, ya que permite almacenar todo. w1&lt;-list(bd,bd,C,1:10000,&quot;Hola&quot;,1:10^6) w1 ## [[1]] ## id name mujer edad ## 1 1 adriana 1 22 ## 2 2 anahi 1 22 ## 3 3 miguel 0 24 ## 4 4 rayner 0 20 ## 5 5 rebeca 1 23 ## 6 6 sergio 0 21 ## 7 7 vania 1 24 ## 8 8 yoselin 1 21 ## ## [[2]] ## id name mujer edad ## 1 1 adriana 1 22 ## 2 2 anahi 1 22 ## 3 3 miguel 0 24 ## 4 4 rayner 0 20 ## 5 5 rebeca 1 23 ## 6 6 sergio 0 21 ## 7 7 vania 1 24 ## 8 8 yoselin 1 21 ## ## [[3]] ## [,1] [,2] ## [1,] 2 3 ## [2,] 5 7 ## ## [[4]] ## [1] 1 2 3 4 5 6 7 8 9 ## [10] 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 ## [28] 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 ## [46] 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 ## [64] 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 ## [82] 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 ## [100] 100 101 102 103 104 105 106 107 108 ## [109] 109 110 111 112 113 114 115 116 117 ## [118] 118 119 120 121 122 123 124 125 126 ## [127] 127 128 129 130 131 132 133 134 135 ## [136] 136 137 138 139 140 141 142 143 144 ## [145] 145 146 147 148 149 150 151 152 153 ## [154] 154 155 156 157 158 159 160 161 162 ## [163] 163 164 165 166 167 168 169 170 171 ## [172] 172 173 174 175 176 177 178 179 180 ## [181] 181 182 183 184 185 186 187 188 189 ## [190] 190 191 192 193 194 195 196 197 198 ## [199] 199 200 201 202 203 204 205 206 207 ## [208] 208 209 210 211 212 213 214 215 216 ## [217] 217 218 219 220 221 222 223 224 225 ## [226] 226 227 228 229 230 231 232 233 234 ## [235] 235 236 237 238 239 240 241 242 243 ## [244] 244 245 246 247 248 249 250 251 252 ## [253] 253 254 255 256 257 258 259 260 261 ## [262] 262 263 264 265 266 267 268 269 270 ## [271] 271 272 273 274 275 276 277 278 279 ## [280] 280 281 282 283 284 285 286 287 288 ## [289] 289 290 291 292 293 294 295 296 297 ## [298] 298 299 300 301 302 303 304 305 306 ## [307] 307 308 309 310 311 312 313 314 315 ## [316] 316 317 318 319 320 321 322 323 324 ## [325] 325 326 327 328 329 330 331 332 333 ## [334] 334 335 336 337 338 339 340 341 342 ## [343] 343 344 345 346 347 348 349 350 351 ## [352] 352 353 354 355 356 357 358 359 360 ## [361] 361 362 363 364 365 366 367 368 369 ## [370] 370 371 372 373 374 375 376 377 378 ## [379] 379 380 381 382 383 384 385 386 387 ## [388] 388 389 390 391 392 393 394 395 396 ## [397] 397 398 399 400 401 402 403 404 405 ## [406] 406 407 408 409 410 411 412 413 414 ## [415] 415 416 417 418 419 420 421 422 423 ## [424] 424 425 426 427 428 429 430 431 432 ## [433] 433 434 435 436 437 438 439 440 441 ## [442] 442 443 444 445 446 447 448 449 450 ## [451] 451 452 453 454 455 456 457 458 459 ## [460] 460 461 462 463 464 465 466 467 468 ## [469] 469 470 471 472 473 474 475 476 477 ## [478] 478 479 480 481 482 483 484 485 486 ## [487] 487 488 489 490 491 492 493 494 495 ## [496] 496 497 498 499 500 501 502 503 504 ## [505] 505 506 507 508 509 510 511 512 513 ## [514] 514 515 516 517 518 519 520 521 522 ## [523] 523 524 525 526 527 528 529 530 531 ## [532] 532 533 534 535 536 537 538 539 540 ## [541] 541 542 543 544 545 546 547 548 549 ## [550] 550 551 552 553 554 555 556 557 558 ## [559] 559 560 561 562 563 564 565 566 567 ## [568] 568 569 570 571 572 573 574 575 576 ## [577] 577 578 579 580 581 582 583 584 585 ## [586] 586 587 588 589 590 591 592 593 594 ## [595] 595 596 597 598 599 600 601 602 603 ## [604] 604 605 606 607 608 609 610 611 612 ## [613] 613 614 615 616 617 618 619 620 621 ## [622] 622 623 624 625 626 627 628 629 630 ## [631] 631 632 633 634 635 636 637 638 639 ## [640] 640 641 642 643 644 645 646 647 648 ## [649] 649 650 651 652 653 654 655 656 657 ## [658] 658 659 660 661 662 663 664 665 666 ## [667] 667 668 669 670 671 672 673 674 675 ## [676] 676 677 678 679 680 681 682 683 684 ## [685] 685 686 687 688 689 690 691 692 693 ## [694] 694 695 696 697 698 699 700 701 702 ## [703] 703 704 705 706 707 708 709 710 711 ## [712] 712 713 714 715 716 717 718 719 720 ## [721] 721 722 723 724 725 726 727 728 729 ## [730] 730 731 732 733 734 735 736 737 738 ## [739] 739 740 741 742 743 744 745 746 747 ## [748] 748 749 750 751 752 753 754 755 756 ## [757] 757 758 759 760 761 762 763 764 765 ## [766] 766 767 768 769 770 771 772 773 774 ## [775] 775 776 777 778 779 780 781 782 783 ## [784] 784 785 786 787 788 789 790 791 792 ## [793] 793 794 795 796 797 798 799 800 801 ## [802] 802 803 804 805 806 807 808 809 810 ## [811] 811 812 813 814 815 816 817 818 819 ## [820] 820 821 822 823 824 825 826 827 828 ## [829] 829 830 831 832 833 834 835 836 837 ## [838] 838 839 840 841 842 843 844 845 846 ## [847] 847 848 849 850 851 852 853 854 855 ## [856] 856 857 858 859 860 861 862 863 864 ## [865] 865 866 867 868 869 870 871 872 873 ## [874] 874 875 876 877 878 879 880 881 882 ## [883] 883 884 885 886 887 888 889 890 891 ## [892] 892 893 894 895 896 897 898 899 900 ## [901] 901 902 903 904 905 906 907 908 909 ## [910] 910 911 912 913 914 915 916 917 918 ## [919] 919 920 921 922 923 924 925 926 927 ## [928] 928 929 930 931 932 933 934 935 936 ## [937] 937 938 939 940 941 942 943 944 945 ## [946] 946 947 948 949 950 951 952 953 954 ## [955] 955 956 957 958 959 960 961 962 963 ## [964] 964 965 966 967 968 969 970 971 972 ## [973] 973 974 975 976 977 978 979 980 981 ## [982] 982 983 984 985 986 987 988 989 990 ## [991] 991 992 993 994 995 996 997 998 999 ## [1000] 1000 ## [ reached getOption(&quot;max.print&quot;) -- omitted 9000 entries ] ## ## [[5]] ## [1] &quot;Hola&quot; ## ## [[6]] ## [1] 1 2 3 4 5 6 7 8 9 ## [10] 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 ## [28] 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 ## [46] 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 ## [64] 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 ## [82] 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 ## [100] 100 101 102 103 104 105 106 107 108 ## [109] 109 110 111 112 113 114 115 116 117 ## [118] 118 119 120 121 122 123 124 125 126 ## [127] 127 128 129 130 131 132 133 134 135 ## [136] 136 137 138 139 140 141 142 143 144 ## [145] 145 146 147 148 149 150 151 152 153 ## [154] 154 155 156 157 158 159 160 161 162 ## [163] 163 164 165 166 167 168 169 170 171 ## [172] 172 173 174 175 176 177 178 179 180 ## [181] 181 182 183 184 185 186 187 188 189 ## [190] 190 191 192 193 194 195 196 197 198 ## [199] 199 200 201 202 203 204 205 206 207 ## [208] 208 209 210 211 212 213 214 215 216 ## [217] 217 218 219 220 221 222 223 224 225 ## [226] 226 227 228 229 230 231 232 233 234 ## [235] 235 236 237 238 239 240 241 242 243 ## [244] 244 245 246 247 248 249 250 251 252 ## [253] 253 254 255 256 257 258 259 260 261 ## [262] 262 263 264 265 266 267 268 269 270 ## [271] 271 272 273 274 275 276 277 278 279 ## [280] 280 281 282 283 284 285 286 287 288 ## [289] 289 290 291 292 293 294 295 296 297 ## [298] 298 299 300 301 302 303 304 305 306 ## [307] 307 308 309 310 311 312 313 314 315 ## [316] 316 317 318 319 320 321 322 323 324 ## [325] 325 326 327 328 329 330 331 332 333 ## [334] 334 335 336 337 338 339 340 341 342 ## [343] 343 344 345 346 347 348 349 350 351 ## [352] 352 353 354 355 356 357 358 359 360 ## [361] 361 362 363 364 365 366 367 368 369 ## [370] 370 371 372 373 374 375 376 377 378 ## [379] 379 380 381 382 383 384 385 386 387 ## [388] 388 389 390 391 392 393 394 395 396 ## [397] 397 398 399 400 401 402 403 404 405 ## [406] 406 407 408 409 410 411 412 413 414 ## [415] 415 416 417 418 419 420 421 422 423 ## [424] 424 425 426 427 428 429 430 431 432 ## [433] 433 434 435 436 437 438 439 440 441 ## [442] 442 443 444 445 446 447 448 449 450 ## [451] 451 452 453 454 455 456 457 458 459 ## [460] 460 461 462 463 464 465 466 467 468 ## [469] 469 470 471 472 473 474 475 476 477 ## [478] 478 479 480 481 482 483 484 485 486 ## [487] 487 488 489 490 491 492 493 494 495 ## [496] 496 497 498 499 500 501 502 503 504 ## [505] 505 506 507 508 509 510 511 512 513 ## [514] 514 515 516 517 518 519 520 521 522 ## [523] 523 524 525 526 527 528 529 530 531 ## [532] 532 533 534 535 536 537 538 539 540 ## [541] 541 542 543 544 545 546 547 548 549 ## [550] 550 551 552 553 554 555 556 557 558 ## [559] 559 560 561 562 563 564 565 566 567 ## [568] 568 569 570 571 572 573 574 575 576 ## [577] 577 578 579 580 581 582 583 584 585 ## [586] 586 587 588 589 590 591 592 593 594 ## [595] 595 596 597 598 599 600 601 602 603 ## [604] 604 605 606 607 608 609 610 611 612 ## [613] 613 614 615 616 617 618 619 620 621 ## [622] 622 623 624 625 626 627 628 629 630 ## [631] 631 632 633 634 635 636 637 638 639 ## [640] 640 641 642 643 644 645 646 647 648 ## [649] 649 650 651 652 653 654 655 656 657 ## [658] 658 659 660 661 662 663 664 665 666 ## [667] 667 668 669 670 671 672 673 674 675 ## [676] 676 677 678 679 680 681 682 683 684 ## [685] 685 686 687 688 689 690 691 692 693 ## [694] 694 695 696 697 698 699 700 701 702 ## [703] 703 704 705 706 707 708 709 710 711 ## [712] 712 713 714 715 716 717 718 719 720 ## [721] 721 722 723 724 725 726 727 728 729 ## [730] 730 731 732 733 734 735 736 737 738 ## [739] 739 740 741 742 743 744 745 746 747 ## [748] 748 749 750 751 752 753 754 755 756 ## [757] 757 758 759 760 761 762 763 764 765 ## [766] 766 767 768 769 770 771 772 773 774 ## [775] 775 776 777 778 779 780 781 782 783 ## [784] 784 785 786 787 788 789 790 791 792 ## [793] 793 794 795 796 797 798 799 800 801 ## [802] 802 803 804 805 806 807 808 809 810 ## [811] 811 812 813 814 815 816 817 818 819 ## [820] 820 821 822 823 824 825 826 827 828 ## [829] 829 830 831 832 833 834 835 836 837 ## [838] 838 839 840 841 842 843 844 845 846 ## [847] 847 848 849 850 851 852 853 854 855 ## [856] 856 857 858 859 860 861 862 863 864 ## [865] 865 866 867 868 869 870 871 872 873 ## [874] 874 875 876 877 878 879 880 881 882 ## [883] 883 884 885 886 887 888 889 890 891 ## [892] 892 893 894 895 896 897 898 899 900 ## [901] 901 902 903 904 905 906 907 908 909 ## [910] 910 911 912 913 914 915 916 917 918 ## [919] 919 920 921 922 923 924 925 926 927 ## [928] 928 929 930 931 932 933 934 935 936 ## [937] 937 938 939 940 941 942 943 944 945 ## [946] 946 947 948 949 950 951 952 953 954 ## [955] 955 956 957 958 959 960 961 962 963 ## [964] 964 965 966 967 968 969 970 971 972 ## [973] 973 974 975 976 977 978 979 980 981 ## [982] 982 983 984 985 986 987 988 989 990 ## [991] 991 992 993 994 995 996 997 998 999 ## [1000] 1000 ## [ reached getOption(&quot;max.print&quot;) -- omitted 999000 entries ] str(w1) ## List of 6 ## $ :&#39;data.frame&#39;: 8 obs. of 4 variables: ## ..$ id : int [1:8] 1 2 3 4 5 6 7 8 ## ..$ name : chr [1:8] &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## ..$ mujer: num [1:8] 1 1 0 0 1 0 1 1 ## ..$ edad : num [1:8] 22 22 24 20 23 21 24 21 ## $ :&#39;data.frame&#39;: 8 obs. of 4 variables: ## ..$ id : int [1:8] 1 2 3 4 5 6 7 8 ## ..$ name : chr [1:8] &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## ..$ mujer: num [1:8] 1 1 0 0 1 0 1 1 ## ..$ edad : num [1:8] 22 22 24 20 23 21 24 21 ## $ : num [1:2, 1:2] 2 5 3 7 ## $ : int [1:10000] 1 2 3 4 5 6 7 8 9 10 ... ## $ : chr &quot;Hola&quot; ## $ : int [1:1000000] 1 2 3 4 5 6 7 8 9 10 ... object.size(w1)/10^6 ## 4 bytes w2&lt;-list(w1,w1,list(w1,C),C,1:1000) # R puede encapsular objetos de tipo str(w2) ## List of 5 ## $ :List of 6 ## ..$ :&#39;data.frame&#39;: 8 obs. of 4 variables: ## .. ..$ id : int [1:8] 1 2 3 4 5 6 7 8 ## .. ..$ name : chr [1:8] &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## .. ..$ mujer: num [1:8] 1 1 0 0 1 0 1 1 ## .. ..$ edad : num [1:8] 22 22 24 20 23 21 24 21 ## ..$ :&#39;data.frame&#39;: 8 obs. of 4 variables: ## .. ..$ id : int [1:8] 1 2 3 4 5 6 7 8 ## .. ..$ name : chr [1:8] &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## .. ..$ mujer: num [1:8] 1 1 0 0 1 0 1 1 ## .. ..$ edad : num [1:8] 22 22 24 20 23 21 24 21 ## ..$ : num [1:2, 1:2] 2 5 3 7 ## ..$ : int [1:10000] 1 2 3 4 5 6 7 8 9 10 ... ## ..$ : chr &quot;Hola&quot; ## ..$ : int [1:1000000] 1 2 3 4 5 6 7 8 9 10 ... ## $ :List of 6 ## ..$ :&#39;data.frame&#39;: 8 obs. of 4 variables: ## .. ..$ id : int [1:8] 1 2 3 4 5 6 7 8 ## .. ..$ name : chr [1:8] &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## .. ..$ mujer: num [1:8] 1 1 0 0 1 0 1 1 ## .. ..$ edad : num [1:8] 22 22 24 20 23 21 24 21 ## ..$ :&#39;data.frame&#39;: 8 obs. of 4 variables: ## .. ..$ id : int [1:8] 1 2 3 4 5 6 7 8 ## .. ..$ name : chr [1:8] &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## .. ..$ mujer: num [1:8] 1 1 0 0 1 0 1 1 ## .. ..$ edad : num [1:8] 22 22 24 20 23 21 24 21 ## ..$ : num [1:2, 1:2] 2 5 3 7 ## ..$ : int [1:10000] 1 2 3 4 5 6 7 8 9 10 ... ## ..$ : chr &quot;Hola&quot; ## ..$ : int [1:1000000] 1 2 3 4 5 6 7 8 9 10 ... ## $ :List of 2 ## ..$ :List of 6 ## .. ..$ :&#39;data.frame&#39;: 8 obs. of 4 variables: ## .. .. ..$ id : int [1:8] 1 2 3 4 5 6 7 8 ## .. .. ..$ name : chr [1:8] &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## .. .. ..$ mujer: num [1:8] 1 1 0 0 1 0 1 1 ## .. .. ..$ edad : num [1:8] 22 22 24 20 23 21 24 21 ## .. ..$ :&#39;data.frame&#39;: 8 obs. of 4 variables: ## .. .. ..$ id : int [1:8] 1 2 3 4 5 6 7 8 ## .. .. ..$ name : chr [1:8] &quot;adriana&quot; &quot;anahi&quot; &quot;miguel&quot; &quot;rayner&quot; ... ## .. .. ..$ mujer: num [1:8] 1 1 0 0 1 0 1 1 ## .. .. ..$ edad : num [1:8] 22 22 24 20 23 21 24 21 ## .. ..$ : num [1:2, 1:2] 2 5 3 7 ## .. ..$ : int [1:10000] 1 2 3 4 5 6 7 8 9 10 ... ## .. ..$ : chr &quot;Hola&quot; ## .. ..$ : int [1:1000000] 1 2 3 4 5 6 7 8 9 10 ... ## ..$ : num [1:2, 1:2] 2 5 3 7 ## $ : num [1:2, 1:2] 2 5 3 7 ## $ : int [1:1000] 1 2 3 4 5 6 7 8 9 10 ... object.size(w2)/10^6 ## 12.1 bytes 1.5 Indexación Es el proceso de manejar los elementos dentro de los objetos. #VECTORES x&lt;-1:100 x[c(1,5,7)] ## [1] 1 5 7 x[-c(1,5,7)] ## [1] 2 3 4 6 8 9 10 11 12 13 14 15 ## [13] 16 17 18 19 20 21 22 23 24 25 26 27 ## [25] 28 29 30 31 32 33 34 35 36 37 38 39 ## [37] 40 41 42 43 44 45 46 47 48 49 50 51 ## [49] 52 53 54 55 56 57 58 59 60 61 62 63 ## [61] 64 65 66 67 68 69 70 71 72 73 74 75 ## [73] 76 77 78 79 80 81 82 83 84 85 86 87 ## [85] 88 89 90 91 92 93 94 95 96 97 98 99 ## [97] 100 o&lt;-(x %% 2)==0 x[o] ## [1] 2 4 6 8 10 12 14 16 18 20 22 24 ## [13] 26 28 30 32 34 36 38 40 42 44 46 48 ## [25] 50 52 54 56 58 60 62 64 66 68 70 72 ## [37] 74 76 78 80 82 84 86 88 90 92 94 96 ## [49] 98 100 x2&lt;-c(2,3,7,4) x2[c(T,T,F,F)] ## [1] 2 3 #matrices A&lt;-matrix(1:30,5,6) A[ 3, 4] ## [1] 18 A[3, ] ## [1] 3 8 13 18 23 28 A[c(1,4), ] ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 1 6 11 16 21 26 ## [2,] 4 9 14 19 24 29 A[,1:2 ] ## [,1] [,2] ## [1,] 1 6 ## [2,] 2 7 ## [3,] 3 8 ## [4,] 4 9 ## [5,] 5 10 A[,-c(1:2) ] ## [,1] [,2] [,3] [,4] ## [1,] 11 16 21 26 ## [2,] 12 17 22 27 ## [3,] 13 18 23 28 ## [4,] 14 19 24 29 ## [5,] 15 20 25 30 A[3:4,c(1,3)] ## [,1] [,2] ## [1,] 3 13 ## [2,] 4 14 A[c(T,T,F,T,T),c(T,F,T,T,T,F)] ## [,1] [,2] [,3] [,4] ## [1,] 1 11 16 21 ## [2,] 2 12 17 22 ## [3,] 4 14 19 24 ## [4,] 5 15 20 25 #data frame bd[1:3,2:3] ## name mujer ## 1 adriana 1 ## 2 anahi 1 ## 3 miguel 0 # también es posible usar el nombre de las variables bd[1:6,c(&quot;name&quot;,&quot;id&quot;)] ## name id ## 1 adriana 1 ## 2 anahi 2 ## 3 miguel 3 ## 4 rayner 4 ## 5 rebeca 5 ## 6 sergio 6 bd[,-c(3)] ## id name edad ## 1 1 adriana 22 ## 2 2 anahi 22 ## 3 3 miguel 24 ## 4 4 rayner 20 ## 5 5 rebeca 23 ## 6 6 sergio 21 ## 7 7 vania 24 ## 8 8 yoselin 21 bd$mujer ## [1] 1 1 0 0 1 0 1 1 mean(bd$mujer) ## [1] 0.625 bd[c(2,6,8),] ## id name mujer edad ## 2 2 anahi 1 22 ## 6 6 sergio 0 21 ## 8 8 yoselin 1 21 bd[bd$edad&lt;=21 &amp; bd$mujer==1,] ## id name mujer edad ## 8 8 yoselin 1 21 #bd %&gt;% filter(mujer==1 &amp; edad&lt;=21) 1.6 Loops y condiciones rm(list = ls()) x&lt;-5 ## if if(x&gt;6){ hist(rnorm(100,3,2)) } ## if else if(x&gt;6){ hist(rnorm(100,3,2)) } else { boxplot(rnorm(100,3,2)) } ## if encadenado x&lt;-60 if(x&gt;6){ hist(rnorm(100,3,2)) mean(x) } else if(x&lt;6){ boxplot(rnorm(100,3,2)) } else if(typeof(x)==&quot;double&quot;){ print(&quot;hola&quot;) } else { print(&quot;hola hola&quot;) } ##for for(i in 1:100){ print(i) } for(i in c(2,7,9,15,19)){ print(i) } for(i in c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)){ print(i) } for(i in 1:5){ for(j in 6:10){ print(i*j) } } for(i in 1:5){ for(j in 6:10){ aux&lt;-i*j print(aux) if(aux==20){ break() print(&quot;hola&quot;) boxplot(rnorm(100,i,j)) } } } for(i in 1:50){ print(i) if(i==20){ break() } } #while z&lt;-1 k&lt;-1 while(z&gt;0.0001){ print(k) z&lt;-1/k k&lt;-k+1 } z==0.0001 1.7 Crear funciones en R. Una función en R tiene la misma idea de lo que realiza una función en cálculo \\(f(x)=y\\), \\(f(x)=x^2=y\\), \\(f(x,y)=.()\\). Estructura básica de una función en R. El nombre de la función (\\(f\\)) Los argumentos \\(X,Y,\\ldots\\) Los procedimientos dentro de la función Las salidas \\(y\\) nombrefuncion&lt;-function(x){ print(&quot;Hola&quot;)#procedimiento 1 y&lt;-x^2 #procedimiento 2 return(y) } nombrefuncion(x=2) nombrefuncion(x=2:10) x2&lt;-nombrefuncion(x=1:100) x2 x3&lt;-nombrefuncion(2:5) x3 ###### funciones matemáticas ff&lt;-function(x){ y&lt;-x^2 return(y) } gg&lt;-function(x){ y&lt;-log(x) return(y) } hh&lt;-function(x){ y&lt;-exp(-x^2) return(y) } curve(ff,xlim=c(-10,10)) curve(gg,xlim=c(0,100)) curve(hh,xlim=c(-10,10)) Ejemplo, desarrolle una función que dado un vector numérico de valores enteros, devuelva; La suma de los números pares La suma del vector Coeficiente de variación del vector tarea1&lt;-function(x){ s1&lt;-sum(x[x %% 2 ==0]) s2&lt;-sum(x) s3&lt;-sd(x)/mean(x) return(list(suma_pares=s1,suma=s2,cv=s3)) } tarea1(1:10) #################################################### tarea1_alt&lt;-function(x){ return(list(suma_pares=sum(x[x %% 2 ==0]),suma=sum(x),cv=sd(x)/mean(x))) } tarea1_alt(1:10) tarea1(rnorm(100)) x&lt;-1:10 sum(1:10) cumsum(1:10) tail(cumsum(1:10),1) # el comando scan permite leer los datos directamente por la consola xx&lt;-scan() tarea1(xx) Otros ejemplos, fx&lt;-function(x){ y&lt;-8*x**2 return(y) } fx(5) fx(1:10) curve(fx,xlim = c(-20,20),ylim=c(0,1000)) plot(fx) ##comando de estadísticas de tendencia central tendencia&lt;-function(x){ n&lt;-length(x) cat(&quot;media:&quot;,fill = T) print(sum(x)/n) cat(&quot;mediana:&quot;,fill = T) x&lt;-sort(x) if(n%%2==0){ me&lt;-(x[n/2]+x[n/2+1])/2 } else { me&lt;-x[ceiling(n/2)] } print(me) cat(&quot;moda:&quot;,fill = T) tt&lt;-table(x) mm&lt;-max(tt) print(names(tt)[(table(x)==mm)]) cat(&quot;media cuadrática:&quot;,fill = T) mc&lt;-sqrt(sum(x**2)/n) print(mc) cat(&quot;media armónica&quot;,fill = T) ma&lt;-n/sum(1/x) print(ma) cat(&quot;media geométrica:&quot;,fill = T) mg&lt;-prod(x)**(1/n) print(mg) } tendencia2&lt;-function(x){ n&lt;-length(x) media&lt;-sum(x)/n x&lt;-sort(x) if(n%%2==0){ me&lt;-(x[n/2]+x[n/2+1])/2 } else { me&lt;-x[ceiling(n/2)] } tt&lt;-table(x) mm&lt;-max(tt) mo&lt;-names(tt)[(table(x)==mm)] mc&lt;-sqrt(sum(x**2)/n) ma&lt;-n/sum(1/x) mg&lt;-prod(x)**(1/n) aux&lt;-list(media,me,mo,mc,ma,mg) return(aux) } a&lt;-tendencia2(xx) tendenciaF&lt;-function(x,f){ n&lt;-sum(f) media&lt;-sum(x*f)/n } 1.8 Importación de datos Definir el directorio de trabajo Identificar el formato de la base de datos que se va a importar Usar el comando adecuado para la importación #gestión de directorios del R getwd() # indica el directorio de trabajo actual dir() # lista los archivos en el directorio de trabajo setwd(&quot;C:/Users\\\\ALVARO\\\\Desktop\\\\ejemplo&quot;) # cambiar el directorio de trabajo # Cargar la base de datos, depende del formato de la base de datos mun15&lt;-read.csv(&quot;municipales2015.csv&quot;) #trabajar con librerías library(foreign) #habilitar una librería bd12pv&lt;-read.dta(&quot;DBvivienda2012vf_9.dta&quot;) 1.9 Exportar la base de datos write.csv(bd12pv,&quot;bd12pv.csv&quot;) # a otros formatos save(mun15,bd12pv,file=&quot;bases.RData&quot;) # al formato .RData Para abrir un objeto RData rm(list=ls()) load(&quot;bases.RData&quot;) load(url(&quot;https://github.com/AlvaroLimber/EST-383/raw/master/data/eh19.RData&quot;)) Actividad Martes. * Indagar el github * Crearse una cuenta * Crear un repositorio para sus proyectos * Crear un repositorio para sus ejercicios * Instalar el github desktop * Interactuar con sus repositorios * Poner en el tablón del classroom su nombre de usuario del classroom o enlace Instalando librerías en R #install.packages(&quot;dplyr&quot;) #install.packages(&quot;rlang&quot;) library(dplyr) #gramática de manejo de bases de datos 1.10 Dataframe y exploración rm(list=ls()) #encuestas a hogares 2019 load(url(&quot;https://github.com/AlvaroLimber/EST-383/raw/master/data/eh19.RData&quot;)) #computo La Paz 2021, 9 marzo setwd(&quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\_data\\\\bigdata&quot;) bd&lt;-read.csv(&quot;lp_2021.csv&quot;,sep=&quot;|&quot;,header = T) # exploración names(bd) names(eh19v) attributes(bd) ehvat&lt;-attributes(eh19v) head(bd) tail(bd) View(bd) View(eh19p) # Renombrando variables # R base names(eh19p)[5]&lt;-&quot;sexo&quot; # dplyr &quot;anidar acciones&quot; pipeline %&gt;% eh19p&lt;-eh19p %&gt;% rename(edad=s02a_03) # Filtrar bases de datos (filas) ## filtrar por tipo de elección en bd aux&lt;-unique(bd$DESCRIPCION) bdgob&lt;-bd[bd$DESCRIPCION==&quot;GOBERNADOR(A)&quot; , ] # R base bdast&lt;-subset(bd,DESCRIPCION==&quot;ASAMBLEISTA TERRITORIO&quot;) # R base bdasp&lt;-bd %&gt;% filter(DESCRIPCION==&quot;ASAMBLEISTA POBLACION&quot;) # dplyr bdalc&lt;-bd %&gt;% filter(DESCRIPCION==aux[4]) bdcon&lt;-bd %&gt;% filter(DESCRIPCION==aux[5]) ## filtrar solo a jefes/as del hogar eh19 #tarea ... # Seleccionar variables (columnas) ## R base aux2&lt;-eh19p[,c(&quot;edad&quot;,&quot;sexo&quot;)] aux3&lt;-subset(eh19p,select = c(&quot;edad&quot;,&quot;sexo&quot;) ) aux4&lt;-eh19p[,-c(4:50,100)] ## dplyr aux5&lt;-eh19p %&gt;% select(edad,sexo) aux6&lt;-eh19p %&gt;% select(-edad,-sexo) Otros comandos útiles son los que permiten añadir información Añadir filas: rbind (R base) bind_rows, tratar de garantizar que las bases de datos tengan los mismos nombres de variables bdmun&lt;-rbind(bdalc,bdcon) bdmun2&lt;-bind_rows(bdalc,bdcon) Añadir columnas (variables): merge (R base) bind_cols (dplyr), asegurarse que ambas bases de datos tengan una variables de unión (key) bdpv&lt;-merge(eh19p[,c(&quot;edad&quot;,&quot;folio&quot;,&quot;sexo&quot;)],eh19v[,c(&quot;folio&quot;,&quot;s01a_10&quot;)],&quot;folio&quot;) View(bdpv) Tarea: Para la encuesta a hogares 2019, generar una base de datos de jefas/jefas que incluya: Información demográfica (edad, sexo, estado civil, lugar de nacimiento) Información geográfica (departamento, área) Educación (Nivel educativo, años de educación) Condiciones de su vivienda (techo, piso, pared, agua, alcantarillado) Pobreza moderada y extrema Generar un reporte por departamento y sexo del jefe del hogar respecto su condición de pobreza extrema. rm(list=ls()) library(dplyr) load(url(&quot;https://github.com/AlvaroLimber/EST-383/raw/master/data/eh19.RData&quot;)) #jefe/jefa aux&lt;-unique(eh19p$s02a_05) bdj&lt;-eh19p %&gt;% filter(s02a_05==aux[1]) #selección de variables para el/la jefa/jefa bdj&lt;-bdj %&gt;% select(folio,depto,area,s02a_02,s02a_03,s02a_10,p0, pext0, niv_ed, niv_ed_g, aestudio) #selección de variables para la vivienda bdv&lt;-eh19v %&gt;% select(folio,s01a_06,s01a_08,s01a_09,s01a_10,s01a_15,s01a_16) # unir las bases de datos, bdj&lt;-merge(bdj,bdv,&quot;folio&quot;) 1.11 Estadística descriptiva ##tablas de frecuencias y Porcentajes t1&lt;-table(bdj$depto)# frecuencias t2&lt;-prop.table(t1)*100 t3&lt;-cumsum(t1) tabla1&lt;-cbind(t1,t3,t2) tabla1 barplot(t1) pie(t2) #tabla de contingencia t4&lt;-table(bdj$depto,bdj$s02a_02) t5&lt;-prop.table(t4)#celda sum(t5) t6&lt;-prop.table(t4,1)*100#fila t7&lt;-prop.table(t4,2)*100#columna t8&lt;-addmargins(t4) addmargins(t4,1) addmargins(t4,2) colnames(t8)[3]&lt;-&quot;Total&quot; row.names(t8)[10]&lt;-&quot;Total&quot; install.packages(&quot;xtable&quot;) library(xtable) xtable(t8) library(knitr) kable(t8) table(bdj$depto,bdj$area,bdj$s02a_02) chisq.test(t4)# tarea: recordar chisq.test(table(bdj$niv_ed_g,bdj$s02a_02)) ##medidas de tendencia central mean(bdj$s02a_03) median(bdj$s02a_03) #media y mediana de edad por departamento y sexo bdj %&gt;% group_by(Departamento=depto,sexo=s02a_02) %&gt;% summarise(media=mean(s02a_03),Me=median(s02a_03)) #tip ctr+shift+m %&gt;% #medidas de dispersión var(bdj$s02a_03) sd(bdj$s02a_03) range(bdj$s02a_03) min(bdj$s02a_03) max(bdj$s02a_03) bdj %&gt;% group_by(Departamento=depto,sexo=s02a_02) %&gt;% summarise(media=mean(s02a_03),Me=median(s02a_03),sd_media=sd(s02a_03)) boxplot(bdj$s02a_03) #medidas de forma quantile(bdj$s02a_03) quantile(bdj$s02a_03,c(0.15,0.45,0.99)) quantile(bdj$s02a_03,seq(0,1,0.01)) quantile(bdj$s02a_03,seq(0,1,0.2)) #Coeficiente de asimetría-&gt; averiguar #kurtosis... hist(bdj$s02a_03) plot(density(bdj$s02a_03)) plot(density(rnorm(10000,0,3)),ylim=c(0,0.25)) points(density(rnorm(10000,0,1.5)),col=&quot;red&quot;,type=&quot;l&quot;) points(density(rnorm(10000,0,6)),col=&quot;green&quot;,type=&quot;l&quot;) summary(bdj$s02a_03) bdj$edadg&lt;-cut(bdj$s02a_03,c(15,25,50,98)) table(bdj$edadg) mean(bdj$s02a_03) 1.12 Inferencia en R Esta orientada a generar el análisis a partir de una muestra probabilística, reconociendo los insumos básicos para esto. Recordar al estimador de Horvitz Thompson para el parámetro del total: \\[\\hat{t}_y=\\sum_s \\frac{ y_k}{\\pi_k}=\\sum_s y_k*\\frac{1}{\\pi_k}=\\sum_s y_k*w_k\\] Donde \\(\\pi_k\\) es la probabilidad de selección del individuo \\(k\\) y \\(w_k=\\pi_k^{-1}\\) se conoce como el factor de expansión. \\[\\bar{y}_s=\\frac{\\hat{t_y}}{N}\\] Todo estimador tiene su varianza teórica \\(V(\\hat{\\theta})\\) y su estimación de la varianza (\\(\\hat{V}(\\hat{\\theta})\\)). Estas varianza depende del método de muestreo empleado, las características mas importantes para construir (aproximar) la varianza en muestreos complejos; la conglomeración y estratificación de la primera etapa. ####Inferencia a partir de una muestra #librería survey install.packages(&quot;survey&quot;) install.packages(&quot;srvyr&quot;)#trabaja con dplyr library(survey) load(url(&quot;https://github.com/AlvaroLimber/EST-383/raw/master/data/eh19.RData&quot;)) mean(eh19p$s02a_03) # media a nivel de la muestra #definir el diseño muestral sd1&lt;-svydesign(ids= ~upm ,strata = ~estrato,weights = ~factor,data=eh19p) r1&lt;-svymean(~s02a_03,design = sd1,deff=T) r1 confint(r1) cv(r1) deff(r1) #pobreza prop.table(table(eh19p$p0))*100 svymean(~p0,design = sd1,deff=T,na.rm=T)*100 nota: los valores perdidos en R se denotan por \\(NA\\) x&lt;-c(23,45,64,22,NA,NA,78,54) mean(x,na.rm=T) mean(na.omit(x)) table(is.na(eh19p$p0)) #modelos lineales lm(ylab~aestudio,data=eh19p) svyglm(ylab~aestudio,design = sd1) 1.13 Gráficos de origen rm(list=ls()) ################ plot(0,0)#inicia una hoja en blanco plot(0,0,type = &quot;n&quot;) x&lt;-c(3,4,7,2) y&lt;-c(0,6,9,2) plot(x,y,type=&quot;p&quot;) plot(x,y,type=&quot;h&quot;) plot(x,y,type=&quot;l&quot;) x[order(x)] plot(x[order(x)],y[order(x)],type=&quot;l&quot;) plot(x,y,type = &quot;b&quot;) plot(x,y,type = &quot;o&quot;) #ventanas multiples par(mfrow=c(2,2)) plot(0,0,type = &quot;n&quot;) plot(x,y,type=&quot;p&quot;) plot(x,y,type=&quot;h&quot;) plot(x,y,type = &quot;b&quot;) dev.off()#desactivando el par #limites para el plot plot(x,y,xlim=c(0,10),ylim=c(0,10)) #título plot(x,y,xlim=c(0,10),ylim=c(0,10),main=&quot;Nombre de la figura&quot;) #sin ejes plot(x,y,xlim=c(0,10),ylim=c(0,10),main=&quot;Nombre de la figura&quot;,axes=F) #sin ejes y etiquetas de los ejes plot(x,y,xlim=c(0,10),ylim=c(0,10),axes=F,ann=F) #tipo de la salida del punto plot(x,y,xlim=c(0,10),ylim=c(0,10),axes=F,ann=F,pch=15) #tamaño de los puntos plot(x,y,xlim=c(0,10),ylim=c(0,10),axes=F,ann=F,pch=15,cex=4) #Color de los puntos plot(x,y,xlim=c(0,10),ylim=c(0,10),axes=F,ann=F,pch=15,cex=4,col=&quot;darkgreen&quot;) #definir, formas, tamaños y colores para cada punto. plot(x,y,xlim=c(0,10),ylim=c(0,10),axes=F,ann=F,pch=c(4,5,15,6),cex=c(1,2,3,4),col=c(&quot;red&quot;,&quot;gray&quot;,&quot;green&quot;,&quot;blue&quot;)) #con lwd se puede dar mayor grosor a las líneas pdf(&quot;f1.pdf&quot;,height = 5,width = 10) plot(x,y,xlim=c(0,10),ylim=c(0,10),axes=F,ann=F,pch=c(4,5,15,6),cex=c(1,2,3,4),col=c(&quot;red&quot;,&quot;gray&quot;,&quot;green&quot;,&quot;blue&quot;),lwd=4,type = &quot;p&quot;) points(x,y,type=&quot;h&quot;) points(2,8,col=&quot;red&quot;,pch=14) text(5,7,&quot;Hola&quot;) axis(1,c(0,5,10)) axis(2,c(0,5,10),c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;)) dev.off() #png #jpeg 1.14 ggplot The grammar of graphics is an answer to a question: what is a statistical graphic? base graphics 1983 grid 2000 lattice 1993 ggplot 2005 ggvis 2014 plotly 1.14.1 Datos, estetica y geometria (layers) rm(list=ls()) #install.packages(&quot;ggplot2&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;maps&quot;) #install.packages(&quot;ggvis&quot;) library(ggplot2) library(dplyr) library(maps) library(ggvis) library(readxl) ####################################### load(url(&quot;https://github.com/AlvaroLimber/EST-383/raw/master/data/eh19.RData&quot;)) set.seed(1424) s&lt;-sample(1:39605,2000) bd&lt;-eh19p[s,] # una variable ggplot(bd,aes(s02a_03))+geom_histogram() ggplot(bd,aes(s02a_03))+geom_boxplot() ggplot(bd,aes(s02a_03))+geom_density() #2 variables cuantitativas ggplot(bd,aes(s02a_03,ylab))+geom_point() # 3 variables ggplot(bd,aes(s02a_03,log(ylab),shape=s02a_02))+geom_point() ggplot(bd,aes(aestudio,log(ylab),shape=s02a_02))+geom_point() #4variables ggplot(bd,aes(s02a_03,log(ylab),shape=s02a_02,colour=area))+geom_point() #5variables ggplot(bd,aes(s02a_03,log(ylab),shape=s02a_02,colour=area,size=ynolab))+geom_point()+geom_smooth() ggplot(bd,aes(s02a_03,log(ylab)))+geom_point()+geom_smooth(method = &quot;lm&quot;)#introducir un ajuste lineal #6variables ggplot(bd,aes(s02a_03,log(ylab),shape=s02a_02,colour=area,size=ynolab))+geom_point()+facet_wrap(~depto) #7 variables ggplot(bd,aes(s02a_03,log(ylab),shape=s02a_02,colour=area,size=ynolab))+geom_point()+facet_wrap(~depto+p0) #2 variables 1 cuanti cuali ggplot(bd,aes(ylab,area))+geom_boxplot() ggplot(bd,aes(area,ylab))+geom_boxplot() ggplot(bd,aes(area,ylab))+geom_violin() ggplot(bd,aes(area,ylab))+geom_violin()+facet_wrap(~depto) ggplot(bd,aes(depto,log(ylab)))+geom_violin()+facet_wrap(~area) ggplot(bd,aes(area,ylab))+geom_jitter() ggplot(mpg, aes(x = displ, y = hwy)) + geom_area() # 1 variable cualitativa ggplot(bd,aes(depto))+geom_bar(colour=&quot;blue&quot;,fill=&quot;red&quot;,alpha=0.1) #Etiquetas g1&lt;-ggplot(bd,aes(depto))+geom_bar(colour=&quot;blue&quot;,fill=&quot;red&quot;,alpha=0.1)+ggtitle(&quot;Departamentos&quot;)+xlab(&quot;Departamento&quot;) g1+ylab(&quot;Frecuencia&quot;)+ylim(0,1000) #guardar pdf(&quot;g1.pdf&quot;) g1+ylab(&quot;Frecuencia&quot;)+ylim(0,1000) dev.off() #temas ggplot(bd,aes(depto))+geom_bar()+theme_gray() ggplot(bd,aes(depto))+geom_bar()+theme_bw() ggplot(bd,aes(depto))+geom_bar()+theme_dark() ggplot(bd,aes(depto))+geom_bar()+theme_minimal() ggplot(bd,aes(depto))+geom_bar()+theme_light() ggplot(bd,aes(depto))+geom_bar()+theme_void() ggplot(bd,aes(depto))+geom_bar()+theme_classic() #temas theme_bw() theme_grey() theme_linedraw() theme_light() theme_dark() theme_minimal() theme_classic() theme_void() 1.15 Flexdashboard Es una librería de R que permite crear tableros de datos (dashboard), la salida final esta diseñada para un entorno web (html). install.packages(&quot;flexdashboard&quot;) library(flexdashboard) 1.16 Shiny Shiny es una librería de RStudio orientada a crear aplicaciones web interactivas con R. Una vez instalada existen dos formas de crear una aplicación en Shiny. Una alternativa cada vez mas popular es la de crear un documento shiny junto con Markdown. Mediante un solo archivo denominando app.R Mediante dos archivos separados, el server.R y ui.R Se recomienda que en cualquiera de las dos alternativas, estos archivos estén contenidos en alguna carpeta. Existen dos partes esenciales al momento de definir una app en Shiny, el UI que es una función que define la interfaz de la aplicación y el Server que define una función con instrucciones sobre cómo construir y reconstruir los objetos R que se mostraran en la UI. La composición básica según las formas de aplicarlas son: # app.R library(shiny) ui &lt;- fluidPage( numericInput(inputId = &quot;n&quot;, &quot;Sample size&quot;, value = 25), plotOutput(outputId = &quot;hist&quot;) ) server &lt;- function(input, output) { output$hist &lt;- renderPlot({ hist(rnorm(input$n)) }) } shinyApp(ui = ui, server = server) # ui.R fluidPage( numericInput(inputId = &quot;n&quot;, &quot;Sample size&quot;, value = 25), plotOutput(outputId = &quot;hist&quot;) ) # server.R function(input, output) { output$hist &lt;- renderPlot({ hist(rnorm(input$n)) }) 1.16.1 UI Al ser UI la interfaz esta permite la interacción directa con el usuario, a estas se las denominan los entradas \\(input\\), las opciones de input son: Botón de acción: actionButton(inputId, label, icon) Enlace: actionLink(inputId, label, icon,) Check box múltiple: checkboxGroupInput(inputId,label, choices, selected, inline) Check box simple: checkboxInput(inputId, label,value) Fecha: dateInput(inputId, label, value,min, max, format, startview,weekstart, language) Rango de fecha: dateRangeInput(inputId, label,start, end, min, max, format,startview, weekstart, language,separator) Cargar archivo: fileInput(inputId, label, multiple,accept) Entrada numérica: numericInput(inputId, label, value,min, max, step) Tipo contraseña: passwordInput(inputId, label,value) Selección tipo botones: radioButtons(inputId, label,choices, selected, inline) Seleccionable: selectInput(inputId, label, choices,selected, multiple, selectize,width, size) Slider: sliderInput(inputId, label, min,max, value, step, round, format,locale, ticks, animate, * width,sep,pre, post) Enviar submitButton(text, icon) Entrada de texto textInput(inputId, label, value) Los inputs principalmente tienen dos argumentos el inputId que se refiere al identificador del input, este se utiliza en el server, y el label que es la etiqueta que aparece en la interfaz visual, estos inputs se asignan a algún objeto (xx&lt;-input()). En el server se tiene acceso al input mediante input$xx. 1.16.2 Server En cuanto el server, este usa los distintos inputs para generar las salidas (outputs), las opciones de salidas disponibles son: DT::renderDataTable(expr, options,callback, escape, env, quoted) renderImage(expr, env, quoted,deleteFile) renderPlot(expr, width, height, res, ,env, quoted, func) renderPrint(expr, env, quoted, func,width) renderTable(expr,, env, quoted, func) renderText(expr, env, quoted, func) renderUI(expr, env, quoted, func) Estos outputs render se asignan a un objeto y luego ellos deben ser incluidos dentro del UI con su correspondiente Output: dataTableOutput(outputId, icon, ) imageOutput(outputId, width, height,click, dblclick, hover, hoverDelay, inline,hoverDelayType, brush, clickId,hoverId) plotOutput(outputId, width, height, click,dblclick, hover, hoverDelay, inline,hoverDelayType, brush, clickId,hoverId) verbatimTextOutput(outputId) tableOutput(outputId) textOutput(outputId, container, inline) uiOutput(outputId, inline, container, ) y htmlOutput(outputId, inline, container, ) 1.17 Ejercicios Propuestos Crear una función que devuelva los \\(k\\) primeros números primos Crear una función que calcule la mediana para tablas de frecuencias con intervalos de clases Crear una función que calcule los Quantiles para tablas de frecuencias con intervalos de clases Realice una función para el calculo del tamaño de muestra para el muestreo aleatorio simple, considere la media, el margen de error relativo y coeficientes de confianza. Crear una función que realice la prueba de independencia Chi-cuadrado Empleando la ENDSA muestre por año y departamento el porcentaje de personas que fuman Utilizando la base de datos del COVID-19 genere un gráfico de evolución de contagios, muertes y recuperados. Use los gráficos de origen Utilizando la base de datos del COVID-19 genere un gráfico de evolución de contagios, muertes y recuperados. Use ggplot Utilizando la encuesta 2018, genere un reporte que presente: Total de población y viviendas por departamento y área Pobreza moderada por Departamento y área Indice de Gini por departamento Realice una función en Shiny empleando la base de datos electoral del \\(20o\\) que permita ver los resultados por recinto, seleccionando, su país, departamento, municipio, recinto. Usando la EH 2018, determine el porcentaje de personas que sufrieron un Atraco (Robo a personas) en la vía pública en los últimos 12 meses. "],["introducción-al-big-data.html", "Chapter 2 Introducción al Big Data 2.1 Definiendo al Big Data 2.2 Las 5 V en el Big Data 2.3 Ciclo de vida de un proyecto de análisis de datos 2.4 Inferencia y Big Data 2.5 Calidad de dato y Big Data 2.6 Captura y preservación 2.7 Análisis y modelado 2.8 Inferencia y ética 2.9 Ejercicios Propuestos", " Chapter 2 Introducción al Big Data 2.1 Definiendo al Big Data De forma simple el Big Data se define como: \\[DATA&gt;RAM\\] O de forma mas literal cualquier cosa demasiado grande para caber en su computadora. La Asociación Americana de Investigación de Opinión Pública menciona: El término Big Data es una descripción imprecisa de un conjunto rico y complicado de características, prácticas, técnicas, cuestiones éticas y resultados, todos asociados con los datos. 2.2 Las 5 V en el Big Data Velocidad Volumen Valor Variedad Veracidad 2.3 Ciclo de vida de un proyecto de análisis de datos Se pueden identificar 4 fases: Clarify: (Clarificar) Llegar a familiarizarse con los datos Develop: (Desarrollar) Crear un modelop de trabajo Productize: (Producir) Automatizar e integrar Publish: (Publicar) Socializar Estas fases pueden contener nodos adicionales según el proyecto: Subset: Extraer los datos a explorar, los datos de trabajo Clarify: (Clarificar) Llegar a familiarizarse con los datos Develop: (Desarrollar) Crear un modelop de trabajo *. Scale Up: Generalizar a la base de datos completa Productize: (Producir) Automatizar e integrar Publish: (Publicar) Socializar Otros ciclos de trabajo puedes ser: Identificar el problema Diseño del requerimiento de datos Procesar los datos Desarrollo del análisis sobre los datos Visualizar los datos 2.4 Inferencia y Big Data El objetivo de la inferencia es poder decir algo de la población objetivo a partir de la información disponibles. Se debe tener en cuenta los tipos de estudio provenientes; ya sean de encuestas probabilísticas, diseño experimentales o estudios de observación. Se debe estar seguro de la calidad de la base de datos proveniente, ya sean estos los errores de muestreo, procesos de calibración, ponderación, post estratificación en el caso de muestreo o el propensity score y la estratificación principal para reparar diseño experimentales rotos. Se puede distinguir tres metas en el proceso de inferencia: Descriptivo Causal Predictivo 2.4.1 Descriptivo La estadística descriptiva puede ser; (1) a un nivel simple de descripción de una base de datos sin la búsqueda de querer expandir los resultados (registros administrativos, censos, estudios de observación) o (2) para encuestas probabilisticas, realizar las estimaciones de la muestra con sus respectivos errores muestrales y a partir de estas estimaciones describir a la población Ejemplo: El INE estima a partir de la EH-2018 que la incidencia de pobreza moderadara en Bolivia para el 2018 alcanza el % Ejemplos como este muestra que el propósito es puramente descriptivo en cuanto a la pobreza. 2.4.2 Causal Muchos investigadores buscan explorar hipótesis, aveces originadas en la teoría o en alguna relación observada de forma empírica, con la idea central de permitir la inferencia causal. La data para esto proviene de diseños experimentales o fuertes estudios no experimentales (cuasi-experimentales), el interés de estos estudios es principalmente encontrar el efecto de de una variable entre otra. \\[X \\rightarrow Y\\] Aspecto que es logrado fácilmente mediante los diseños experimentales. En este tipo de estudio el componente descriptivo no es tan importante como el método para identificar la causalidad. Es importante diferenciar en este punto la causalidad de la correlación. Ejemplo: (3ie) Este informe se basa en un estudio de Dupas, Duflo y Kremer que se realizó en colaboración con el gobierno de Ghana. El estudio examinó los impactos a mediano plazo de otorgar becas de cuatro años a estudiantes que no podían matricularse en escuelas secundarias superiores (SHS) debido a limitaciones financieras. Los investigadores encontraron que el programa de becas tuvo un impacto significativo en el logro educativo y las habilidades cognitivas, particularmente entre las niñas. El programa también tuvo un mayor impacto en las tasas de finalización de SHS de las niñas en términos porcentuales. Ejemplo: UDAPE el 2013 realizó el calculo del impacto de la renta dignidad en Bolivia empleando el método de regresión discontinua un método cuasi-experimental. Una de las debilidades principales de estos estudios es la falta o poca de validez externa, es decir, es difícil poder generalizar los resultados. Métodos cuasi-experimentales Diferencia en diferencia Propensity Score Matching (PSM) Probit. Variables instrumentales Modelos estructurales Regresión Discontinua. 2.4.3 Predictivo El pronóstico o predicción tiene un rol diferenciado según la ciencia de aplicación, teniendo un rol significativo dentro de las estadística oficiales, principalmente en lo social (proyecciones poblacionales) y económico (indicadores macroeconómicos), principalmente para hacedores de política, gobernantes y empresarios. Similar a En la configuración de inferencia causal, es de suma importancia que conozcamos el proceso que generó los datos, y podemos descartar cualquier mecanismo de selección sistemática desconocido o no observado. Ejemplo: El Institute of Global Health, Faculty of Medicine, University of Geneva tiene una página web que realiza pronosticos por país para los casos de COVID-19. Enlace 2.5 Calidad de dato y Big Data La mayoría de los datos en el mundo real son ruidosos, inconsistentes y adolecen de valores perdidos, independientemente de su origen. Incluso si la recopilación de datos es barata, los costos de crear datos de alta calidad a partir de la fuente (limpieza, conservación, estandarización e integración) son considerables. La calidad de los datos se puede caracterizar de múltiples maneras: Precisión: ¿qué tan precisos son los valores de los atributos en los datos? Integridad: ¿están completos los datos? Consistencia: ¿Cuán consistentes son los valores en y entre las bases de datos? Puntualidad: ¿qué tan oportunos son los datos? Accesibilidad: ¿están disponibles todas las variables para el análisis? Los cientistas de datos tienen décadas de experiencia en la transformación de datos desordenados, ruidosos y no estructurados en un conjunto de datos bien definido, claramente estructurado y probado en calidad. El pre procesamiento es un proceso complejo y que lleva mucho tiempo porque es práctico: requiere juicio y no puede automatizarse de manera efectiva. Un flujo de trabajo típico comprende múltiples pasos desde la definición de datos hasta el análisis y termina con el filtrado. Es difícil exagerar el valor del pre-procesamiento para cualquier análisis de datos, pero esto es particularmente cierto en big data. Los datos deben analizarse, estandarizarse, no duplicarse y normalizarse. Análisis (parsing): Exploración de datos Estandarización (Standardization): Identificar variables que requieren transformación y ajustes. Duplicación: Consiste en eliminar registros redundantes Normalización (Normalization): Es el proceso de garantizar que los campos que se comparan entre archivos sean lo más similares posible en el sentido de que podrían haber sido generados por el mismo proceso. Como mínimo, se deben aplicar las mismas reglas de estandarización a ambos archivos. 2.6 Captura y preservación Se refiere al proceso de obtener la información de las distintas fuentes posibles y luego pasar a un proceso de preservación. 2.6.1 Fuentes convencionales Estas están basadas en la información que se distribuye de forma tradicional mediante bases de datos estructuradas, normalmente estas las distribuyen instituciones con amplios conocimientos en la gestión de bases de datos, para el caso de Bolivia se puede citar algunas: Instituto Nacional de Estadística SNIS UDAPE Geoboliva Ministerios  2.6.2 Datos web y APIs Se refiere a la captura y uso de la información que se genera en espacios digitales, web, redes sociales, etc. Referirse al capítulo 3 de scraping web, estos son los mecanismos para extraer información en internet 2.6.3 Record Linkage Se refiere al proceso de concatenar o unir observaciones dispuestas en múltiples bases de datos. Puede ser usado para compensar la falta de información Se usa para crear estudios longitudinales Se pueden armar seudo-paneles Esto permite mejorar la cobertura (append), ampliar las temáticas de estudio (merge). Pre-procesamiento Matching: Une información a partir de una clave, existen muchos problemas con claves tipo texto. Aproximaciones a reglas para hacer math: Definir criterios para posibilitar el match basados en reglas, distancias cercanas, etc. Match basados en probabilidad: FellegiSunter method 2.6.4 Bases de datos Una vez que los datos fueron recolectados y enlazados entre diferentes fuentes, es necesario guardar la información. Ahora se discute las alternativas para guardar la información. DBMS (databasemanagement systems) Sistema de gestión de base de datos: Decidir que herramienta usar segun la dimensión de los archivos. Bases de datos espaciales Múltiples formatos: https://juliael.carto.com/ 2.6.5 Programando con Big Data MapReduce: map, shuffle y reduce Apache hadoop MapReduce (Hadoop Distributed File System HDFS) Apache Spark 2.7 Análisis y modelado 2.7.1 Machine learning ¿Machine learning = Statistics? Verán que muchos métodos discutidos a lo largo de su formación como estadísticos aparecen dentro del maching learning y que son llamados con otros nombres. Al pensar en machine learning debemos asociarlo directamente con procesos computacionales, muchos otros conceptos giran al rededor de esta idea como la inteligencia artificial. Proceso de machine learning hoy: Permiten manejar autos de forma autónoma Puede recomendar libros, amistades, música, etc Identificar drogas, proteínas y ciertos génes Se usa para detectar ciertos tipos de cáncer y otras enfermedades médicas Ayudan a conocer que estudiantes necesitan un apoyo adicional Ayudan a persuadir por que candidato votar en las elecciones. 2.7.1.1 El proceso del machine learning Entender el problema y la meta Formular esto como un problema de machine learning Explorar y preparar los datos Feature engineeing Selección del método Evaluación Deployment 2.7.1.2 Formulación del problema En ML existen 2 grandes categorías Aprendizaje supervisado: Existe una \\(Y\\) que queremos predecir o clasificar a partir de los datos. El fin es el ajuste y la generalización * Clasificación (\\(Y\\) cualitativa) * Predicción * Regresión (\\(Y\\) cuantitativa) Aprendizaje no supervisado: No existe una variable objetivo, se quiere conocer, entender las asociaciones y patrones naturales en los datos. * Clustering * PCA, MCA 2.7.2 Análisis de texto: Entendiendo lo que la gente escribe Clasificación de documentos Análisis de sentimientos Etiquetado de discursos 2.7.3 Networks 2.8 Inferencia y ética 2.8.1 Información y visualización Los usuarios pueden escanear, reconocer, comprender y recordar representaciones visualmente estructuradas más rápidamente de lo que pueden procesar representaciones no estructuradas La ciencia de la visualización se basa en múltiples campos, como la psicología perceptiva, las estadísticas y el diseño gráfico para presentar información La efectividad de una visualización depende tanto de las necesidades de análisis como de los objetivos de diseño. El diseño, el desarrollo y la evaluación de una visualización se guían por la comprensión de los antecedentes y las metas del público objetivo. El desarrollo de una visualización efectiva es un proceso iterativo que generalmente incluye los siguientes pasos: Especificar las necesidades del usuario, tareas, requisitos de accesibilidad y criterios para el éxito. Preparar datos (limpiar, transformar). Diseñar representaciones visuales. Interacción de diseño. Planifique el intercambio de ideas, procedencia. Prototipo / evaluación, incluidas las pruebas de usabilidad. Implementar (supervisar el uso, proporcionar soporte al usuario, gestionar el proceso de revisión). 2.8.1.1 Dashboards 2.8.1.2 Elementos 2.8.1.3 Datos espaciales Datos temporales Datos jerárquicos Datos de redes Datos de texto Tarea: resumir los siguientes puntos del libro: Big Data and Social Science, Ian Foster. 2.8.2 Error e inferencia 2.8.3 Privacidad y confidencialidad 2.8.4 Workbooks 2.9 Ejercicios Propuestos Explorar los métodos cuasi-experimentales que existen Buscar información respecto a: los matriculados en educación regular y universidad por año y departamento en Bolivia Empleando la fuente anterior, generar en R el código que cargue el archivo encontrado Buscar dos papers (1) donde se uso machine learning y (2) análisis de texto y comentar con al menos 5000 caracteres Buscar ejemplos (al menos uno) de bases de datos, páginas web u otros asociados a datos que no respeten los principios de privacidad y confidencialidad. "],["scraping-web-raspado-web.html", "Chapter 3 Scraping Web (Raspado web) 3.1 Pasos para la recopilación de información 3.2 Tecnologías de diseminación, extracción y almacenamiento Web 3.3 Librerías en R 3.4 Librería rvest 3.5 Ejemplo: Infocasas, ventas La Paz 3.6 Ejemplo: Titulares de La Razon 3.7 Ejemplo: COVID en el mundo, Worldometers 3.8 Ejemplo con unidades educativas del MIN-EDU 3.9 Ejemplo: COVID, Bolivia segura, Worldometers 3.10 Ejemplo: Ultracasas 3.11 Ejemplo: Ketal 3.12 Ejemplo: Ministerio de Educación 3.13 Ejemplo, informacion COVID-19 en Bolivia 3.14 APIs 3.15 Ejercicios Propuestos", " Chapter 3 Scraping Web (Raspado web) La definición del scraping web que se toma en este documento proviene de (Mitchell2015?) que expresa: El Web Scraping es la recolección automática de información de los sitios web. (obviamente no a través de un humano usando un navegador web). Un tema dentro del scraping web son las denominadas APIs (Application Programming Interface), estas son entradas a las páginas web diseñadas por los administradores de la página web, por lo mismo no siempre contienen toda la información que se desea. Aunque las API no son tan ubicuas como deberían, puede encontrar API para muchos tipos de información. Interesado en la música? Hay algunas API diferentes que pueden darle canciones, artistas, álbumes e incluso información sobre estilos musicales y artistas relacionados. ¿Necesitas datos deportivos? ESPN proporciona API para información de atletas, puntajes de juegos y más. Google tiene docenas de API en su sección de Desarrolladores para traducciones de idiomas, análisis, geolocalización y más. 3.1 Pasos para la recopilación de información Siguiendo a (Iacus2015?) que establece cinco pasos al momento de decidir recopilar información mediante el scraping web, estos pasos son: Asegúrese de saber exactamente qué tipo de información necesita. Esto puede ser específico (el producto interno bruto de todos los países de la OCDE durante los últimos 10 años'') o vago (opinión de la gente sobre el teléfono de la empresa X, ``colaboración entre miembros del Senado de los Estados Unidos). Averigüe si hay fuentes de datos en la Web que puedan proporcionar información directa o indirecta sobre su problema. Si está buscando hechos concretos, esto probablemente sea fácil. Si está interesado en conceptos bastante vagos, esto es más difícil. La página de inicio de la embajada de un país podría ser una fuente valiosa para la acción de política exterior que a menudo se oculta detrás del telón de la diplomacia. Los tweets pueden contener tendencias de opinión sobre casi todo, las plataformas comerciales pueden informar sobre la satisfacción de los clientes con los productos, las tarifas de alquiler en los sitios web de propiedades pueden contener información sobre el atractivo actual de los barrios de la ciudad  Desarrolle una teoría del proceso de generación de datos cuando busque fuentes potenciales. ¿Cuándo se generaron los datos, cuándo se cargaron en la Web y quién lo hizo? ¿Existen áreas potenciales que no están cubiertas, son consistentes o precisas, y puede identificarlas y corregirlas? Equilibrar las ventajas y desventajas de las posibles fuentes de datos. Los aspectos relevantes pueden ser la disponibilidad (¡y la legalidad!), los costos de recolección, la compatibilidad de nuevas fuentes con la investigación existente, pero también factores muy subjetivos como la aceptación de la fuente de datos por parte de otros. También piense en posibles formas de validar la calidad de sus datos. ¿Existen otras fuentes independientes que brinden información similar para que sean posibles verificaciones cruzadas aleatorias? En caso de datos secundarios, ¿puede identificar la fuente original y verificar los errores de transferencia? ¡Toma una decisión! Elija la fuente de datos que le parezca más adecuada, documente los motivos de la decisión y comience con los preparativos para la recopilación. Si es factible, recopile datos de varias fuentes para validar las fuentes de datos. Muchos problemas y beneficios de varias estrategias de recopilación de datos salen a la luz solo después de la recopilación real. 3.2 Tecnologías de diseminación, extracción y almacenamiento Web Una vez elegida la fuente de datos (página web) y al menos con la intuición de lo que se quiere obtener, el siguiente paso es decidir el mecanismos para el scraping (raspado), esto esta relacionado al tipo de pagina web, ver si esta ofrece una entrada API y conocer sus limitaciones puede ser un punto de partida. Esto se denomina Technologies for disseminating, extracting, and storing web data Collecting, en el marco del uso de R la figura muestra las interacciones entre ellas. Tecnologías para difundir, extraer y almacenar datos web (considerando el entorno de R) 3.3 Librerías en R El siguiente cuadro presenta las librerías en R relacionadas al web Scraping, incluyendo los servicios API, que a la fecha del proyecto alcanza a 761 librerías, esto representa el \\(5.02\\)% de las librerías en en R. library(knitr) library(packagefinder) library(xtable) findPackage(c(&quot;API&quot;,&quot;scrape&quot;),limit.results=-1) Ejemplo de clase. Siguiendo los 5 pasos mencionados anteriormente, defina un tema de interés. Definir el tema: Identificar fuentes (web): Calidad de las fuentes: Ventajas y desventajas: Elegir la fuente: Tiempo: 10 minutos. 3.4 Librería rvest Rvest es parte del universo tidyverse y esta orientada al scrape de páginas web. La instalación es usual: #desde CRAN install.packages(&quot;rvest&quot;) #la versión en desarrollo desde github devtools::install_github(&quot;tidyverse/rvest&quot;) Existe la herramienta selectorgadget disponible en http://selectorgadget.com/, esta permite interactuar con las páginas web para seleccionar partes del documento usando un CSS selector. Las funciones mas importantes dentro de rvest son: read_html para cargar la estructura de la página html_nodes para extraer información de la página según el CSS selector html_text para extraer texto de un html_nodes html_table para extraer tablas y ponerlas en data frame 3.5 Ejemplo: Infocasas, ventas La Paz library(rvest) #test infocasa&lt;-read_html(&quot;https://www.infocasas.com.bo/venta/inmuebles/la-paz/pagina1&quot;) node&lt;-html_nodes(infocasa,&quot;strong&quot;) price&lt;-html_text(node) price[3:23] #colección de todos los precios price&lt;-NULL for(i in 1:16){ print(i) url&lt;-paste0(&quot;https://www.infocasas.com.bo/venta/inmuebles/la-paz/pagina&quot;,i) infocasa&lt;-read_html(url) node&lt;-html_nodes(infocasa,&quot;strong&quot;) aux&lt;-html_text(node) price&lt;-c(price,aux[3:23]) } price&lt;-price[1:328] price&lt;-gsub(&quot;U$S &quot;,&quot;&quot;,price,fixed = T) price&lt;-gsub(&quot;,&quot;,&quot;&quot;,price,fixed = T) class(price) price&lt;-as.numeric(price) price&lt;-na.omit(price) price&lt;-price[price&gt;1000 &amp; price&lt;10000000] summary(price) 3.6 Ejemplo: Titulares de La Razon lr&lt;-read_html(&quot;https://www.la-razon.com/&quot;) node&lt;-html_nodes(lr,&quot;.title&quot;) html_text(node) 3.7 Ejemplo: COVID en el mundo, Worldometers library(rvest) covid&lt;-read_html(&quot;https://www.worldometers.info/coronavirus/&quot;) tab&lt;-html_table(covid) bd&lt;-tab[[1]]#hoy tab[[2]]#ayer tab[[3]]#2 días Ejercicio: mostrar un gráfico para las muertes por país en base a la información del COVID-19 y también mostrar un ranking de los países con más avance en la vacunación al día de hoy (13/4). library(dplyr) names(bd)[1]&lt;-&quot;id&quot; names(bd)[12]&lt;-&quot;muertesM&quot; names(bd)[2]&lt;-&quot;pais&quot; t1&lt;-bd %&gt;% filter(is.na(id)==F) %&gt;% select(pais,muertesM) %&gt;% mutate(muertesM=as.numeric(gsub(&quot;,&quot;,&quot;&quot;,muertesM))) t1&lt;-na.omit(t1) t1&lt;-t1[order(t1$muertesM),] plot(1:204,t1$muertesM,type=&quot;h&quot;) #vacunas vc&lt;-read.csv(&quot;https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv&quot;) head(vc) str(vc) library(lubridate) library(ggplot2) vc$date&lt;-ymd(vc$date) ggplot(vc %&gt;% filter(iso_code==&quot;BOL&quot;),aes(date,daily_vaccinations))+geom_line() vc %&gt;% filter(iso_code==&quot;CHL&quot;) %&gt;% select(date,daily_vaccinations) %&gt;% plot(type=&quot;b&quot;,col=&quot;red&quot;) 3.8 Ejemplo con unidades educativas del MIN-EDU 3.9 Ejemplo: COVID, Bolivia segura, Worldometers library(rvest) bs1&lt;-read_html(&quot;https://www.boliviasegura.gob.bo/index.php&quot;) bs2&lt;-read_html(&quot;https://www.boliviasegura.gob.bo/datos.php&quot;) aux&lt;-html_nodes(bs1,&quot;.casos&quot;) casos&lt;-html_text(aux) aux&lt;-html_nodes(bs1,&quot;.recuperados&quot;) recup&lt;-html_text(aux) aux&lt;-html_nodes(bs1,&quot;.decesos&quot;) muerte&lt;-html_text(aux) html_text(html_nodes(bs1,&quot;.card-text&quot;)) tbs&lt;-html_table(bs2,fill = T) View(tbs) mun&lt;-tbs[[12]] table(mun$`Nivel Anterior`,mun$`Nivel Actual`) t1&lt;-tbs[[2]] global&lt;-c(casos, recup,muerte) str(t1) #herramientas para trabajar con texto t1$Acumulado nchar(t1$Acumulado) substr(t1$Acumulado,1,3) grep(&quot;53&quot;,t1$Acumulado) gsub(&quot;53&quot;,&quot;XX&quot;,t1$Acumulado) t1$Acumulado&lt;-as.numeric(gsub(&quot;,&quot;,&quot;&quot;,t1$Acumulado)) t1$Decesos&lt;-as.numeric(gsub(&quot;,&quot;,&quot;&quot;,t1$Decesos)) t1$Recuperados&lt;-as.numeric(gsub(&quot;,&quot;,&quot;&quot;,t1$Recuperados)) library(ggplot2) ggplot(t1,aes(Acumulado,Decesos))+geom_point() ### worldometers wm&lt;-read_html(&quot;https://www.worldometers.info/coronavirus/&quot;) tabla&lt;-html_table(wm) t2&lt;-tabla[[1]] str(t2) aux&lt;-is.na(t2$`#`) t2&lt;-t2[!aux,] for(i in c(3:15,17:19)){ print(i) t2[,i]&lt;-gsub(&quot;+&quot;,&quot;&quot;,t2[,i]) t2[,i]&lt;-as.numeric(gsub(&quot;,&quot;,&quot;&quot;,t2[,i])) } t2$`Tests/1M pop` ggplot(t2, aes(`Tot Cases/1M pop`,`Tests/1M pop`,))+geom_point()+facet_wrap(~Continent) 3.10 Ejemplo: Ultracasas Motivación: Explorar el mercado de casas en Bolivia ultra&lt;-read_html(&quot;https://www.ultracasas.com/buscar/casa-en-venta--en--la-paz---la-paz?page=1&quot;) #titulo aux1&lt;-html_text(html_nodes(ultra,&quot;.line-height-30px&quot;))[-1] #zona aux2&lt;-html_text(html_nodes(ultra,&quot;.text-ellipsis&quot;))[-1][seq(2,24,2)] #precio aux3&lt;-html_text(html_nodes(ultra,&quot;h4&quot;))[-c(1:2,15:17)] #metros, dormitorios, baños aux&lt;-html_text(html_nodes(ultra,&quot;.icon-default-color&quot;)) aux4&lt;-aux[seq(1,36,3)]#dormitorios aux5&lt;-aux[seq(2,36,3)]#baños/duchas aux6&lt;-aux[seq(3,36,3)]#metros2 #base inicial bd0&lt;-data.frame(titulo=aux1,zona=aux2,precio=aux3,bed=aux4,bath=aux5,m2=aux6) for(i in 2:26){ print(i) www&lt;-paste0(&quot;https://www.ultracasas.com/buscar/casa-en-venta--en--la-paz---la-paz?page=&quot;,i) ultra&lt;-read_html(www) #titulo aux1&lt;-html_text(html_nodes(ultra,&quot;.line-height-30px&quot;))[-1] #zona aux2&lt;-html_text(html_nodes(ultra,&quot;.text-ellipsis&quot;))[-1][seq(2,24,2)] #precio aux3&lt;-html_text(html_nodes(ultra,&quot;h4&quot;))[-c(1:2,15:17)] #metros, dormitorios, baños aux&lt;-html_text(html_nodes(ultra,&quot;.icon-default-color&quot;)) aux4&lt;-aux[seq(1,36,3)]#dormitorios aux5&lt;-aux[seq(2,36,3)]#baños/duchas aux6&lt;-aux[seq(3,36,3)]#metros2 #base inicial bd1&lt;-data.frame(titulo=aux1,zona=aux2,precio=aux3,bed=aux4,bath=aux5,m2=aux6) bd0&lt;-rbind(bd0,bd1) } 3.11 Ejemplo: Ketal Una de las potencialidades del scraping es poder rescatar información contenida en páginas web, según la estructura de esta, en esta sección se presenta un ejemplo del código y la recolección de información que puede realizarse. Para esto se eligió la página de supermercados Ketal que es abierta y publica los precios de sus distintos productos de forma categorizada por tipo de productos. El estudio de esta pagina tiene el principal objetivo de mostrar el proceso de extracción, el uso potencial de la información esta relacionada a tener la variación de los precios y para futuros estudios se podría completar el ejercicio incluyendo la parte de la demanda mediante la encuesta de presupuestos familiares y poder así pronosticar la inflación dentro de este sector y para la población potencial que acude a supermercados. El ejemplo presenta el proceso del scraping para 8 grupo de productos: Carne de aves Carne de cerdo Carne de res Pescado Leches Aceites Frutas y verduras Dulces Se emplea la librería rvest, que es un paquete diseña para para facilitar la descarga y la manipulación de HTML y XML. También se utiliza la extensión Selector Gadget https://selectorgadget.com, este permite la identificación de las estructuras de las páginas web. El objetivo del raspado es obtener el nombre del producto, su código, y el precio. Utilizando el selector gadget se identifica que en \\(.product-name\\) se guardan los nombres, en \\(.price.product-price\\) el precio del producto y en \\(data-id-product\\) el identificador del producto. En R el código es: #librerías para el raspado library(rvest) #Enlaces de los grupos de productos ave &lt;- read_html(&quot;https://www.ketal.com.bo/209-aves&quot;) cerdo&lt;-read_html(&quot;https://www.ketal.com.bo/208-cerdo&quot;) res&lt;-read_html(&quot;https://www.ketal.com.bo/210-res&quot;) fish&lt;-read_html(&quot;https://www.ketal.com.bo/17060162-pescados&quot;) leches&lt;-read_html(&quot;https://www.ketal.com.bo/53-leches-liquidas&quot;) aceites&lt;-read_html(&quot;https://www.ketal.com.bo/272-aceites-y-vinagres&quot;) frutaver&lt;-read_html( &quot;https://www.ketal.com.bo/50-frutas-y-verduras?id_category=50&amp;n=150&quot;) dulce&lt;-read_html( &quot;https://www.ketal.com.bo/15-chocolates-y-golosinas?id_category=15&amp;n=150&quot;) #definición de la base de datos que guarda la información bd&lt;-NULL #Algoritmo del raspado de los 8 productos k&lt;-1 for(i in list(ave,cerdo,res,fish,leches,aceites,frutaver,dulce)){ print(k) name&lt;-html_attr(html_nodes(i,&quot;.product-name&quot;),&quot;title&quot;)[-1] precio&lt;-html_text( html_nodes(i,&quot;.price.product-price&quot;),trim=T)[seq(1,length(name)*2,2)] code&lt;-html_attr(html_nodes(i,&quot;.add_to_compare&quot;),&quot;data-id-product&quot;) bd&lt;-rbind(bd,data.frame(name,precio,code)) k&lt;-k+1 } #se identifica el día day&lt;-substr(Sys.time(),1,10) #se guarda la informacion en base al dia del raspado bd$day&lt;-day save(bd,file = paste0(day,&quot;.RData&quot;)) 3.12 Ejemplo: Ministerio de Educación library(rvest) library(foreign) library(xlsx) ######################## bd&lt;-read.dta(&quot;mmUE.dta&quot;) rue&lt;-bd$cod_ue_det rue&lt;-unlist(strsplit(rue,&quot;;&quot;)) bd&lt;-data.frame(matrix(0,1,78)) k&lt;-1 for(i in 325:length(rue)){ print(i) urlmin&lt;-paste0(&quot;http://seie.minedu.gob.bo/reportes/mapas_unidades_educativas/ficha/ver/&quot;,rue[i]) ue &lt;- read_html(urlmin,encoding = &quot;UTF-8&quot;) jj&lt;-grepl(&quot;Error was&quot;,unlist(strsplit(html_text(html_nodes(ue,&quot;strong&quot;))[1:2],&quot;:&quot;))[c(2)]) if(jj==T){ next() } #nombre id (2) bd[k,1:2]&lt;-unlist(strsplit(html_text(html_nodes(ue,&quot;strong&quot;))[1:2],&quot;:&quot;))[c(2,4)] #Informacion administrativa (12) bd[k,3:14]&lt;-html_text(html_nodes(ue,&quot;dd&quot;)) #matricula #promovidos #reprobacion #abandono # (60) #matricula for(j in 1:4){ bd[k,(15*j):(14+15*j)]&lt;-as.integer(unlist(html_table(ue)[j])[-c(1:3)]) } #servicios (4) bd[k,75:78]&lt;-html_text(html_nodes(ue,&quot;strong&quot;))[18:21] k&lt;-k+1 } write.xlsx(bd,&quot;ue2017.xlsx&quot;,row.names = F) 3.13 Ejemplo, informacion COVID-19 en Bolivia library(rvest) #paso 0: Estadísticas del covid-19 en Bolivia #paso 1: cargar la www de interés bs&lt;-read_html(&quot;https://www.boliviasegura.gob.bo/&quot;) ww&lt;-read_html(&quot;https://www.worldometers.info/coronavirus/&quot;) #paso 2: Raspar la información de interés node0&lt;-html_nodes(bs,&quot;h1&quot;) node1&lt;-html_text(node0) node2&lt;-as.numeric(node1) barplot(node2,legend.text = c(&quot;Confirmados&quot;,&quot;Recuperados&quot;,&quot;Muertes&quot;)) aux&lt;-html_nodes(bs,&quot;.mapanuevos&quot;) #paso 3: trabajando con tablas tabla&lt;-html_table(bs,fill = T) tabla[[2]] #paso 4: limpieza #paso 5: Análisis 3.14 APIs Conocida también por la sigla API,application programming interface, es un conjunto de sub rutinas, funciones y procedimientos (o métodos, en la programación orientada a objetos) que ofrece cierta biblioteca para ser utilizado por otro software. Ofrece una entrada a los datos que distribuye el API. 3.14.1 API Banco Mundial La API ofrece acceso a las estadísticas que genera el Banco Mundial, existe un set extenso de estadísticas de la mayoría de los países. La API ofrece mas de 16000 indicadores de series de tiempo, muchos de los indicadores tienen una cobertura de 50 años. La API incluye el acceso a 45 bases de datos, incluyendo: World Development Indicators International Debt Statistcs Doing Business Human Capital Index Subnational Poverty Y otros, ver En R se puede acceder mediante la librería wbstats. install.packages(&quot;wbstats&quot;) #paso 1, instalar el rtools: https://cran.r-project.org/bin/windows/Rtools/ #paso 2, instalar devtools #install.packages(&quot;devtools&quot;) #paso 3, cargar el devtools #library(devtools) #paso4, instalar wbstats #install_github(&quot;nset-ornl/wbstats&quot;) library(wbstats) #acceso a todos los indicadores disponibles wbindex&lt;-wb_indicators(&quot;es&quot;) #acceso al catalogo de datos wbcat&lt;-wbdatacatalog() #búsqueda de indicador index_edu&lt;-wb_search(pattern = &quot;education&quot;) index_sal&lt;-wb_search(pattern = &quot;health&quot;) # ver los países y sus códigos wbpais&lt;-wb_countries() #Comando para extraer los indicadores t1&lt;-wb_data(country = &quot;BOL&quot;,indicator = &quot;NY.GDP.MKTP.CD&quot;, start_date = 2000, end_date = 2020) t2&lt;-wb_data(country = c(&quot;BOL&quot;,&quot;PER&quot;),indicator = &quot;SE.SEC.TCHR&quot;, start_date = 2000, end_date = 2020) #Tarea en aula #obtener un indicador de interés para 3 países y graficar los resultados 3.14.2 API Google trends La libraría gtrendsR permite acceder a la API de google trends, esta permite acceder a las tendencias de búsqueda que se realizan mediante el motor de búsqueda de Google. install.packages(&quot;gtrendsR&quot;) library(gtrendsR) aux&lt;-countries ?gtrends() res &lt;- gtrends(&quot;Coronavirus&quot;, geo = c(&quot;BO&quot;)) plot(res) bd_cov&lt;-res$interest_over_time library(ggplot2) bd_cov$hits&lt;-as.numeric(gsub(&quot;&lt;&quot;,&quot;&quot;,bd_cov$hits)) ggplot(bd_cov,aes(date,hits))+geom_line() ##### res2&lt;-gtrends(c(&quot;COVID&quot;,&quot;Dioxido de Cloro&quot;,&quot;Vacuna&quot;),geo=&quot;BO&quot;,time=&quot;today 12-m&quot;) plot(res2) res2$interest_over_time 3.14.3 API Twitter install.packages(&quot;rtweet&quot;) library(rtweet) library(help=rtweet) tw&lt;-search_tweets(&quot;estadística&quot;) tw1&lt;-search_tweets(&quot;COVID&quot;,n=10000) 3.14.4 API Google Maps R tiene la librería googleway que permite tener acceso a la API de google maps, es necesario una llave de autentificación. Para la llave seguir los pasos en el enlace #install.packages(&quot;googleway&quot;) library(googleway) map_key &lt;- &#39;xxx&#39; google_map(key = map_key,location = c(-16.5030161,-68.1292566),zoom = 8) %&gt;% add_traffic() 3.15 Ejercicios Propuestos Extraer la fecha, y el precio de compra y venta del dolar de la página https://www.bcb.gob.bo Usando la página https://www.trabajopolis.bo/ seleccionar un departamento y armar una base de dato de ofertas laborales Armar una base de datos en base a la página https://www.infocasas.com.bo Explorar librarias API con acceso a Youtube y encontrar los 10 videos con más visualizaciones que incluyan a Bolivia en su titulo. Explorar la libraria gtrendsR y explorar en que meses en Bolivia es mas frecuente la búsqueda de Usar la informacion de worldometers y generar un gráfico de contagios por millon de los distintos paises. "],["big-data-en-r.html", "Chapter 4 Big Data en R 4.1 Limitaciones en R 4.2 A los límites de la memoria y más allá 4.3 Parallel R", " Chapter 4 Big Data en R R en un software que se adapta perfectamente con las fases del ciclo de vida de los proyectos de datos, ofreciendo herramientas para cada una de ellas; Entre las mas interesantes, R Markdown, Shiny, sweave, etc. Adicionalmente existen múltiples librerías que permite trabajar con otros software, principalmente los asociados a bases de datos. En el capitulo 1 se enfatiza el uso de R para el manejo, procesamiento y análisis de bases de datos, sumado a esto el conocimiento de distintas estadísticas en base a los cursos de formación, en este capitulo se buscar unir ambos tópicos y explicar como usar el poder del modelado matemático y de datos en R, considerando bases de datos grandes, esto sin necesidad de recurrir a otros equipos. Lo que se espera a partir de este capitulo es: Conocer las limitaciones de R para el Big Data y como ellas pueden resolverse El uso de las librerías ff, ffbase, ffbase2, y bigmemory, para el manejo de la memoria del equipo El uso de métodos estadísticos para objetos grandes en R, a través de las librerías bigglm y ffbase Mejorar la velocidad del procesamiento de datos con librerías que permiten la computación paralela (parallel computing) Manipulación de datos más rápidos con el uso de la librería data.table 4.1 Limitaciones en R A manera que uno va aprendiendo mas del R en la universidad o en el trabajo se valora cada vez mas la flexibilidad de R, su constante crecimiento, la ventaja de ser de código abierto, etc. Sin embargo, es importante tener en cuenta las limitaciones de R: Los datos se ajustan a la RAM R es generalmente muy lento comparado con otros lenguajes 4.1.1 Memoria R permite trabajar con bases de datos que no superen el 50-60% de la RAM de la computadora Existen soluciones en R sin tener que recurrir aun a plataformas como; Microsoft Azure, Amazon EC2, or Google Cloud Platform. Existe también la opción de trabajar con RStudio-Cloud, https://rstudio.cloud/plans/free 4.1.2 Velocidad de procesamiento R se considera un lenguaje interpretado y, como tal, su ejecución de código más lenta viene por definición. Procesos linea por linea El bajo rendimiento del código R puede deberse al hecho de que el lenguaje no está formalmente definido 4.2 A los límites de la memoria y más allá 4.2.1 Transformacion y agregación de datos con la librería ff y ffbase rm(list=ls()) install.packages(&quot;ff&quot;) install.packages(&quot;ffbase&quot;) #install.packages(&quot;ffbase2&quot;) / github library(ff) library(ffbase) setwd(&quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\_data\\\\bigdata&quot;) bd1&lt;-read.csv(&quot;200613COVID19MEXICO.csv&quot;,sep=&quot;,&quot;,header=T) object.size(bd1)/1000000 #paso 1: tener un directorio para archivos temporales de ff system(&quot;mkdir ffdf&quot;) #paso 2: definir la carpeta temporal options(fftempdir=&quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\_data\\\\bigdata\\\\ffdf&quot;) #paso 3: Cargar la base de datos bd2&lt;-read.csv.ffdf(file=&quot;200614COVID19MEXICO.csv&quot;,sep=&quot;,&quot;,header=T, next.rows=100000,colClasses=NA,VERBOSE=F) bd3&lt;-read.csv.ffdf(file=&quot;200614COVID19MEXICO.csv&quot;,sep=&quot;,&quot;,header=T, first.rows=-1,colClasses=NA,VERBOSE=T) bd4&lt;-read.csv.ffdf(file=&quot;200614COVID19MEXICO.csv&quot;,sep=&quot;,&quot;,header=T, next.rows=10000,colClasses=NA,VERBOSE=T) bd5&lt;-read.csv.ffdf(file=&quot;201115COVID19MEXICO.csv&quot;,sep=&quot;,&quot;,header=T, next.rows=100000,colClasses=NA,VERBOSE=F) object.size(bd1)/1000000 # CSV DE R object.size(bd2)/1000000 # CSV.FFDF 100000 object.size(bd3)/1000000 # CSV.FFDF TODO object.size(bd4)/1000000 # CSV.FFDF 1000 str(bd2) #USO DE LAS FFDF table(bd2$SEXO) table(bd5$SEXO) install.packages(&quot;tictoc&quot;) library(tictoc) tic(&quot;R&quot;) table(bd1$EDAD,bd1$SEXO) toc() tic(&quot;ffdf&quot;) table(bd2$EDAD,bd2$SEXO) toc() tic(&quot;ffdf bd5&quot;) table(bd5$EDAD,bd5$SEXO) toc() tic(&quot;ffdf table&quot;) table.ff(bd2$EDAD,bd2$SEXO) toc() Funciones para objetos ff mean(bd1$EDAD) mean(bd2$EDAD) mean(bd5$EDAD) median(bd2$EDAD) median(bd1$EDAD) #sobre la bd2 library(doBy) library(dplyr) res0&lt;-bd1 %&gt;% group_by(PAIS_NACIONALIDAD,SEXO) %&gt;% summarise(mean(EDAD)) bd2df&lt;-as.data.frame(bd2) bd5df&lt;-as.data.frame(bd5) object.size(bd2df)/10^6 object.size(bd5df)/10^6 bd2df %&gt;% group_by(PAIS_NACIONALIDAD,SEXO) %&gt;% summarise(mean(EDAD)) #bd2 %&gt;% group_by(PAIS_NACIONALIDAD,SEXO) %&gt;% summarise(mean(EDAD)) summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=bd1) summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=bd2df) tapply(bd1$EDAD, bd1$PAIS_NACIONALIDAD, mean) tapply(bd2df$EDAD, bd2df$PAIS_NACIONALIDAD, mean) res&lt;-ffdfdply(bd2,split=bd2$SEXO,FUN=function(x){ summaryBy(EDAD~PAIS_NACIONALIDAD+SEXO,FUN=mean,data=x) }) as.data.frame(res) ss1&lt;-subset(bd1,EDAD&gt;60) ss2&lt;-subset(bd2,EDAD&gt;60) ss3&lt;-subset.ffdf(bd2,EDAD&gt;60) ss4&lt;-subset(bd5,EDAD&gt;60) #memoria en R #object.size(&quot;a&quot;) #memory.size() #memory.limit() #(memory.size()/memory.limit())*100 #memory.profile() #guardar objetos ffdf save.ffdf(res) rm(res) load.ffdf(&quot;ffdb&quot;) #convirtiendo a ff dd&lt;-as.ffdf(bd1) #forma lenta bd1$FECHA_ACTUALIZACION&lt;-as.factor(bd1$FECHA_ACTUALIZACION) str(bd1) #forma rápida i &lt;- sapply(bd1, is.character) bd1[,i] &lt;- lapply(bd1[,i], as.factor) str(bd1) dd&lt;-as.ffdf(bd1) 4.2.2 Modelos GLM con la las librerias ff y ffbase install.packages(&quot;biglm&quot;) library(ff) library(ffbase) library(biglm) model1&lt;-lm(EDAD~UCI,data = bd1) model2&lt;-lm(EDAD~UCI,data = bd2) model3&lt;-bigglm.ffdf(EDAD~SEXO,data = dd) summary(model1) summary(model2) summary(model3) 4.2.3 Expandiendo la memoria con la libreria bigmemory rm(list=ls()) library(bigmemory) #limitación de bigmemory, todos los variables de la base de datos de interés deben ser numéricas. load(&quot;C:\\\\Users\\\\ALVARO\\\\Documents\\\\GitHub\\\\EST-383\\\\data\\\\oct20.RData&quot;) bd1&lt;-computo[,13:25] str(bd1) object.size(bd1)/10^6 bd2&lt;-as.big.matrix(as.matrix(bd1)) object.size(bd1)/10^6 object.size(bd2)/10^6 object.size(bd1)/object.size(bd2) class(bd2) class(bd1) #xx&lt;-read.big.matrix(&quot;.csv&quot;,sep=&quot;,&quot;) #alternativamente read.big.matrix dim(bd2) dimnames(bd2) head(bd2) summary(bd1) summary(bd2) mean(bd2[,1]) summary(bd2[,2]) names(bd2) dimnames(bd2) lm(CC~MNR,data=bd2) library(bigtabulate) library(biganalytics) library(biglm) library(bigstatsr) library(bigalgebra) # salio de R el 2020 library(bigpca)# salio el 2018 de R reg0&lt;-bigglm.big.matrix(CC~MNR,data=bd2) summary(reg0) reg&lt;-bigglm.big.matrix(CC~FPV,data=bd2) summary(reg) class(bd2) 4.3 Parallel R Esta sección se enfoca en los métodos de computación paralelo, de tal forma que se pueda controlara la paralelizacion en una sola maquina. El objetivo es poder aprovechar los cores que tiene disponible los PC en la actualidad, R por defecto solo trabaja en una. Recursos online En R Un libro acerca del tema (aquí) Antes una función para calcular el tiempo de procesamiento. rm(list=ls()) teval&lt;-function(...){ gc() start&lt;-proc.time() result&lt;-eval(...) finish&lt;-proc.time() return(list(Duration=finish-start,Result=result)) } Veamos el rendimiento de lo visto antes. library(ff) library(ffbase) library(bigmemory) library(biganalytics) mr&lt;-matrix(rnorm(10000000*10),nrow = 10000000,ncol=10) mr&lt;-cbind(mr,binom=rbinom(10000000,5,0.7)) mbm&lt;-as.big.matrix(mr) mff&lt;-as.ffdf(as.data.frame(mr)) class(mr) class(mbm) class(mff) object.size(mr)/10^6 object.size(mbm)/10^6 object.size(mff)/10^6 teval(colMeans(mr)) teval(colmean(mbm)) #teval(colMeans(mff)) teval(apply(mr,2,mean)) teval(apply(mbm,2,mean)) teval(apply(mff,2,mean)) resul&lt;-list() teval( for(i in 1:ncol(mff)){ resul[[i]]&lt;-mean.ff(mff[[i]]) } ) teval(sapply(mff,mean)) teval(tapply(mr[,1], mr[,11], mean)) teval(tapply(mbm[,1], mbm[,11], mean)) teval(tapply(mff[[1]], mff[[11]], mean.ff)) aux&lt;-matrix(NA,6,10) teval( for(i in 1:10){ for(j in unique(mff[,11])){ aux[j+1,i]&lt;-mean(mff[mff[,11]==j,i]) } } ) 4.3.1 Libreria parallel Ahora sí, veamos la librería parallel y snow. Disponible desde la versión 2.14.0 Existen otras populares; multicore, snow (Simple Network of Workstations). La primera descontinuada y la segunda limitada. El manual https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf library(parallel) library(snow) #funciones propias mclapply()#no funciona completamente en windows parLapply() library(help=parallel) library(help=snow) #viendo los cores disponibles detectCores() #definiendo un cluster de trabajo #SOCK usa Rscript para lanzar más copias de R (en el mismo host u opcionalmente en otro lugar) #FORK makeForkCluster bifurca a los trabajadores en el host actual (que hereda el entorno de la sesión actual) (NO WINDOWS) cl &lt;- makeCluster(3, type = &quot;SOCK&quot;) stopCluster(cl) cl &lt;- makeCluster(2, type = &quot;SOCK&quot;) teval(parApply(cl,mr,2,mean)) stopCluster(cl) cl &lt;- makeCluster(3, type = &quot;SOCK&quot;) teval(parApply(cl,mr,2,mean)) stopCluster(cl) cl &lt;- makeCluster(4, type = &quot;SOCK&quot;) teval(parApply(cl,mr,2,mean)) stopCluster(cl) #parApply(cl,mff[[1]],1,mean) #parApply(cl,mbm,2,mean) A&lt;-matrix(10^6,10) B&lt;-matrix(10^6,10) C&lt;-matrix(10^6,10) mclapply(X=list(A,B,C),FUN=mean,mc.preschedule = F,affinity.list = c(1,1,2)) mclapply(X=list(A,B,C),FUN=mean) "],["r-y-spark.html", "Chapter 5 R y Spark 5.1 Introducción 5.2 Librería dplyr 5.3 Arrancando Spark 5.4 Análisis con Spark", " Chapter 5 R y Spark 5.1 Introducción En este capítulo emplearemos Spark junto con R para el procesamiento de datos. Spark es un framework que permite realizar procesos de división y paralelismo en un equipo o múltiples equipos. 5.1.1 Hadoop Google (2004) publicó un nuevo documento que describe cómo realizar operaciones en todo el Sistema de archivos de Google, un enfoque que se conoció como MapReduce. Como era de esperar, hay dos operaciones en MapReduce: map y reduce. La operación de map proporciona una forma arbitraria de transformar cada archivo en un nuevo archivo, mientras que la operación de reduce combina dos archivos. Ambas operaciones requieren un código de computadora personalizado, pero el marco MapReduce se encarga de ejecutarlas automáticamente en muchas computadoras a la vez. Estas dos operaciones son suficientes para procesar todos los datos disponibles en la web, al tiempo que proporcionan suficiente flexibilidad para extraer información significativa de la misma. 5.1.2 Spark En 2009, Apache Spark comenzó como un proyecto de investigación en AMPLab de UC Berkeley para mejorar MapReduce. Específicamente, Spark proporcionó un conjunto más rico de verbos más allá de MapReduce para facilitar la optimización del código que se ejecuta en múltiples máquinas. Spark también cargó datos en la memoria, lo que hace que las operaciones sean mucho más rápidas que el almacenamiento en disco de Hadoop Spark Componetes: Spark Core: Base donde se apoya el resto de los componentes Spark SQL: Procesamiento de dato estructurados y no estructurados Spark streaming: Procesamiento de datos en tiempo real. Spark MLLib: Machine learning Spark graph: Procesamiento de grafos Algunos conceptos importantes HDFS: Sistema de ficheros 5.1.3 Sparklyr Oficialmente, sparklyr es una interfaz R para Apache Spark. Está disponible en CRAN y funciona como cualquier otro paquete de CRAN, lo que significa que es independiente de las versiones de Spark, es fácil de instalar, sirve a la comunidad R, abarca otros paquetes y prácticas de la comunidad R, y así sucesivamente. Está alojado en GitHub y tiene licencia de Apache 2.0, que le permite clonar, modificar y contribuir de nuevo a este proyecto. 5.2 Librería dplyr #install.packages(&quot;dplyr&quot;) library(dplyr) load(url(&quot;https://github.com/AlvaroLimber/EST-384/raw/master/data/eh19.RData&quot;)) ## Obtener el promedio de edad por sexo de los jefes de hogar aux&lt;-eh19p[eh19p$s02a_05==&quot;1.JEFE O JEFA DEL HOGAR&quot;,c(&quot;s02a_03&quot;,&quot;s02a_02&quot;)] aux&lt;-subset(eh19p,s02a_05==&quot;1.JEFE O JEFA DEL HOGAR&quot;,c(&quot;s02a_03&quot;,&quot;s02a_02&quot;)) tapply(aux$s02a_03, aux$s02a_02, mean) #dplyr # %&gt;% operador pipe t1&lt;-eh19p %&gt;% filter(s02a_05==&quot;1.JEFE O JEFA DEL HOGAR&quot;) %&gt;% group_by(s02a_02) %&gt;% summarise(mean(s02a_03)) t2&lt;-eh19p %&gt;% rename(sexo=s02a_02,edad=s02a_03,paren=s02a_05) %&gt;% filter(paren==&quot;1.JEFE O JEFA DEL HOGAR&quot;) %&gt;% group_by(sexo) %&gt;% summarise(edad=mean(edad)) ## Obtener el promedio de edad y años de educación por sexo de los jefes de hogar t3&lt;-eh19p %&gt;% rename(sexo=s02a_02,edad=s02a_03,paren=s02a_05) %&gt;% filter(paren==&quot;1.JEFE O JEFA DEL HOGAR&quot;) %&gt;% group_by(sexo) %&gt;% summarise(edad=mean(edad),aestudio=mean(aestudio,na.rm = T),med_aestudio=median(aestudio,na.rm = T),n=n()) eh19p %&gt;% rename(sexo=s02a_02,edad=s02a_03,paren=s02a_05) %&gt;% filter(paren==&quot;1.JEFE O JEFA DEL HOGAR&quot;) %&gt;% group_by(depto,area,sexo) %&gt;% summarise(edad=mean(edad),aestudio=mean(aestudio,na.rm = T),med_aestudio=median(aestudio,na.rm = T),n=n()) # ctr+mayus+m %&gt;% eh19p&lt;-eh19p %&gt;% mutate(jefe=(s02a_05==&quot;1.JEFE O JEFA DEL HOGAR&quot;)) eh19p %&gt;% mutate(jefe=(s02a_05==&quot;1.JEFE O JEFA DEL HOGAR&quot;)) %&gt;% group_by(jefe,s02a_02) %&gt;% summarise(mean(ylab,na.rm = T)) eh19p&lt;-eh19p %&gt;% rename(sexo=s02a_02) names(eh19p)[6]&lt;-&quot;edad&quot; # personas entre 15 y 30 años, por departamento y sexo, el promedio de horas a la semana de trabajo, años de educación y el mínimo y máximo de ingresos laborales y su rango eh19p %&gt;% filter(edad&gt;=15 &amp; edad&lt;=30) %&gt;% group_by(depto,sexo) %&gt;% summarise(horas=mean(tothrs,na.rm = T),edu=mean(aestudio,na.rm = T),min_ylab=min(ylab,na.rm = T),max_ylab=max(ylab,na.rm = T)) %&gt;% mutate(rango=max_ylab-min_ylab) eh19p %&gt;% slice_sample(n=20) %&gt;% select(edad) %&gt;% mutate(gedad=cut(edad,c(0,14,25,60,100),include.lowest =T)) eh19p %&gt;% mutate(gedad=cut(edad,c(0,5,14,25,60,100),include.lowest =T)) %&gt;% group_by(gedad) %&gt;% summarise(mean(aestudio,na.rm=T)) ## Por departamento, área y sexo de los jefes del hogar, mostrar el porcentaje de hogares con piso de tierra. aux&lt;-eh19p %&gt;% filter(jefe==T) %&gt;% select(folio,sexo,area,depto) aa&lt;-attributes(eh19v) aa$variable.labels unique(eh19v$s01a_09) aux2&lt;-eh19v %&gt;% mutate(tierra=s01a_09==&quot;1.TIERRA&quot;) %&gt;% select(folio,tierra) head(aux2) bd&lt;-merge(aux,aux2)## 1:1 (), n:1 , 1:n , n:n (X 30) (Y 20) XY 600 #x #Nombre materia nota ci #Juan m1 45 123 #Juan m2 57 123 #Juan m3 57 123 # #y #Nombre ci plan_estudio #Juan 123 2012 #Maria 124 2007 #merge(x,y,by=c(&quot;ci&quot;,&quot;Nombre&quot;),all=T) #xy #Nombre materia nota ci plan_estudio #Juan m1 45 123 2012 #Juan m2 57 123 2012 #Juan m3 57 123 2012 #Maria 124 2007 bd %&gt;% group_by(depto,area,sexo) %&gt;% summarise(Piso_Tierra=mean(tierra)*100) #se recomienda explorar el comando merge, y la variable folio es la llave para la unión de las bases de datos # Ejercicio. Obtener una tabla por departamento y área con la siguiente información # * % de hogares pobres extremos # * % de hogares con jefes del hogar mujeres # * Promedio de personas en el hogar load(url(&quot;https://github.com/AlvaroLimber/EST-384/raw/master/data/eh19.RData&quot;)) bd&lt;-eh19p %&gt;% filter(s02a_02==&quot;2.Mujer&quot;) %&gt;% mutate(pobreza=pext0==&quot;Pobre extremo&quot;,mujer=s02a_05==&quot;JEFE O JEFA DEL HOGAR&quot; ) %&gt;% group_by(depto,area) %&gt;% summarise(pobre=mean(pobreza)*100,mujer1=mean(mujer)) bd eh19p %&gt;% mutate(pobreza=(pext0==&quot;Pobre extremo&quot;)*1,jefa=(s02a_05==&quot;1.JEFE O JEFA DEL HOGAR&quot; &amp; s02a_02==&quot;2.Mujer&quot;)*1, nper=1) %&gt;% group_by(depto,area,folio) %&gt;% summarise(nper=sum(nper),jefa=max(jefa),pobreza=max(pobreza)) %&gt;% group_by(depto,area) %&gt;% summarise(pobreza=mean(pobreza,na.rm=T)*100,jefa=mean(jefa)*100,nper=mean(nper)) t1&lt;-eh19p %&gt;% mutate(pobreza=(pext0==&quot;Pobre extremo&quot;)*1,jefa=(s02a_05==&quot;1.JEFE O JEFA DEL HOGAR&quot; &amp; s02a_02==&quot;2.Mujer&quot;)*1, nper=1) %&gt;% group_by(depto,area,folio) %&gt;% summarise(nper=sum(nper),jefa=max(jefa),pobreza=max(pobreza)) t2&lt;-t1 %&gt;% group_by(depto,area) %&gt;% summarise(pobreza=mean(pobreza,na.rm=T)*100,jefa=mean(jefa)*100,nper=mean(nper)) t2 xtable::xtable(t2) knitr::kable(t2) 5.3 Arrancando Spark 5.3.1 Prerequisitos R RStudio Java 8 system(&quot;java -version&quot;) 5.3.2 Instalación #instalar la librería sparlyr install.packages(&quot;sparklyr&quot;) #Habilitando la librería library(sparklyr) #versiones disponibles spark_available_versions() #versiones instaladas spark_installed_versions() #instalando spark desde R spark_install(&quot;3.0&quot;) #spark_install(version=&quot;2.3&quot;) 5.3.3 Soluciones a problemas de instalación install.packages(&quot;rJava&quot;) library(rJava) 5.3.4 Creando una sesión en Spark #inicia la sesión sc &lt;- spark_connect(master = &quot;local&quot;) #sc &lt;- spark_connect(master = &quot;local&quot;, spark_home = &quot;C:\\\\Users\\\\ALVARO\\\\AppData\\\\Local\\\\spark&quot;,version=&quot;3.0.1&quot;) 5.3.5 Interface web spark_web(sc) http://localhost:4040/jobs/ http://127.0.0.1:4040/executors/ Jobs Stages Storage Environment Executors SQL 5.3.6 Configuración conf &lt;- spark_config() conf$`sparklyr.shell.driver-memory` &lt;- &quot;2G&quot; #conf$spark.memory.fraction &lt;- 0.8 #spark_home=&quot;C:\\\\Users\\\\ALVARO\\\\AppData\\\\Local\\\\spark\\\\spark-2.4.3-bin-hadoop2.7&quot; #conf$sparklyr.gateway.port &lt;- 9090 #conección #apagar conexión spark_disconnect(sc) spark_disconnect_all() 5.4 Análisis con Spark Pasos en el análisis de datos 5.4.1 Importando los datos Por lo general, importar significa que R leerá los archivos y los cargará en la memoria; cuando se usa Spark, los datos se importan a Spark, no a R. Colección de documentos #csv/importaciones sp_importaciones&lt;-spark_read_csv(sc, name=&quot;importaciones&quot;, path = &quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\db_bolivia\\\\importaciones\\\\importaciones_csv&quot;) ########### #esquema ########### top_rows &lt;- read.csv(&quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\db_bolivia\\\\importaciones\\\\importaciones_csv\\\\1993.csv&quot;,sep=&quot;,&quot;, nrows = 5) spec_with_r &lt;- sapply(top_rows, class) spec_with_r[6]&lt;-&quot;factor&quot; sp_importaciones2&lt;-spark_read_csv(sc, name=&quot;importaciones2&quot;, path = &quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\db_bolivia\\\\importaciones\\\\importaciones_csv&quot;, columns = spec_with_r) # memoria object.size(sp_importaciones) Comando copy_to m1&lt;-data.frame(matrix(rnorm(10^7),ncol=20)) object.size(m1)/(10^6) sp_m1&lt;-copy_to(sc,m1) rm(m1) load(&quot;C:\\\\Users\\\\ALVARO\\\\Documents\\\\GitHub\\\\EST-383\\\\data\\\\oct20.RData&quot;) object.size(computo)/10^6 sp_computo&lt;-copy_to(sc,computo) sp_eh19p&lt;-copy_to(sc,eh19p) rm(computo) Documento específico sp_covid&lt;-spark_read_csv(sc, name=&quot;covid&quot;, path = &quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\db_bolivia\\\\bigdata\\\\200614COVID19MEXICO.csv&quot;) sp_covid2&lt;-spark_read_csv(sc, name=&quot;covid2&quot;, path = &quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\db_bolivia\\\\bigdata\\\\201115COVID19MEXICO.csv&quot;) 5.4.2 Librería DPLYR (Gramática de manipulación de datos) https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html Eliminar un objeto en spark library(dplyr) db_drop_table(sc,&quot;importaciones2&quot;) db_drop_table(sc,&quot;m1&quot;) DPLYR en Spark sp_importaciones %&gt;% group_by(GESTION) %&gt;% count() sp_covid2 %&gt;% count() eh19v %&gt;% group_by(depto) %&gt;% count() # R sp_eh19v %&gt;% group_by(depto) %&gt;% count() # Spark library(dplyr) load(url(&quot;https://github.com/AlvaroLimber/EST-383/raw/master/data/oct20.RData&quot;)) names(computo)[1]&lt;-&quot;pais&quot; ############################## ### Columnas -&gt; variables ############################## #cambio de nombre de las variables computo&lt;-computo %&gt;% rename(mas=`MAS - IPSP`,cc=CC) computo&lt;-computo %&gt;% rename(idep=`Número departamento`,imun=5) names(computo) # Selección de variables bd1&lt;-computo %&gt;% select(pais,cc,mas) head(bd1) # Crear nuevas variables bd1&lt;-bd1 %&gt;% mutate(a=1,s_mas_cc=cc+mas,raiz_mas=sqrt(mas),lcc=log(cc)) bd1&lt;-bd1 %&gt;% mutate(mas100=mas&gt;100,mean_mas=mas&gt;mean(mas)) # ordenando las variables bd1&lt;-bd1 %&gt;% relocate(lcc:mas,before=a)#pendiente bd1[,c(&quot;cc&quot;,&quot;pais&quot;,&quot;a&quot;)] ############################## ### Filas-&gt; Observaciones ############################## #filtrado # elección presidencial solo Bolivia pv&lt;-computo %&gt;% filter(Elección==&quot;Presidente y Vicepresidente&quot;) pvbol&lt;-computo %&gt;% filter(Elección==&quot;Presidente y Vicepresidente&quot; &amp; pais==&quot;Bolivia&quot;) ############################## ### Resumen estadístico ############################## # summarise pvbol %&gt;% summarise(media_mas=mean(mas),media_cc=mean(cc),max_mas=max(mas),max_cc=max(cc)) pvbol %&gt;% summarise(p100mas=mean(mas&gt;100)*100,p100cc=mean(cc&gt;100)*100) # group_by pvbol %&gt;% group_by(Departamento) %&gt;% summarise(p100mas=mean(mas&gt;100)*100,p100cc=mean(cc&gt;100)*100) pvbol %&gt;% group_by(Departamento,Provincia) %&gt;% summarise(p100mas=mean(mas&gt;100)*100,p100cc=mean(cc&gt;100)*100) #count tally pvbol %&gt;% group_by(Departamento,Provincia) %&gt;% count() pvbol %&gt;% group_by(Departamento,Provincia) %&gt;% tally() # encadenamiento masivo pvbol %&gt;% filter(Departamento==&quot;Beni&quot;) %&gt;% select(mas,cc) %&gt;% plot() pvbol %&gt;% filter(Departamento==&quot;Beni&quot;) %&gt;% select(mas,cc) %&gt;% cor() 5.4.3 DPLYR en Spark # 0. Habilitar la librería library(sparklyr) library(dplyr) library(ggplot2) # 1. Conexión con Spark sc &lt;- spark_connect(master = &quot;local&quot;, version = &quot;2.4.3&quot;) # 2. Definir la data (importación) sp_covid&lt;-spark_read_csv(sc, name=&quot;covid&quot;, path = &quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\db_bolivia\\\\bigdata\\\\200614COVID19MEXICO.csv&quot;)#específico sp_importaciones&lt;-spark_read_csv(sc, name=&quot;importaciones&quot;, path = &quot;C:\\\\Users\\\\ALVARO\\\\Desktop\\\\db_bolivia\\\\importaciones\\\\importaciones_csv&quot;)#carpeta load(url(&quot;https://github.com/AlvaroLimber/EST-383/raw/master/data/oct20.RData&quot;)) pvbol&lt;-computo %&gt;% rename(eleccion=Elección) %&gt;% filter(eleccion==&quot;Presidente y Vicepresidente&quot;) sp_pvbol&lt;-copy_to(sc,pvbol) # 3. Exploración de los datos / (&quot;Modelado&quot;) names(pvbol) glimpse(sp_pvbol) glimpse(sp_importaciones) sdf_describe(sp_importaciones) sdf_describe(sp_pvbol,c(&quot;CC&quot;)) summary(pvbol$CC) sp_importaciones %&gt;% group_by(DESADU) %&gt;% count() a1&lt;-sp_importaciones %&gt;% group_by(DESADU) %&gt;% count() %&gt;% collect() # guardar la salida en R sp_a2&lt;-sp_importaciones %&gt;% group_by(DESADU) %&gt;% count() %&gt;% compute(&quot;a2&quot;) # guardar la salida en Spark sp_importaciones %&gt;% group_by(GESTION,DESADU) %&gt;% count() sp_importaciones %&gt;% group_by(DESADU, GESTION) %&gt;% count() sp_importaciones %&gt;% group_by(DESADU, GESTION) %&gt;% summarise() sp_importaciones %&gt;% count() # Generar un cuadro por gestión y producto, respecto el total de peso bruto y guardarlo en R. t1&lt;-sp_importaciones %&gt;% group_by(GESTION,NANDINA,DESNAN) %&gt;% summarise(peso_ton=sum(KILBRU,na.rm=T)/1000) %&gt;% arrange(GESTION,desc(peso_ton)) %&gt;% collect() library(DBI) aux&lt;-dbGetQuery(sc,&quot;Select * from importaciones limit 5&quot;) #lm(FOB~PAG,data=sp_importaciones) mod1&lt;-sp_importaciones %&gt;% select(FOB,PAG) %&gt;% ml_linear_regression(FOB~.) # 4. Análisis de los resultados # 5. Salida. Visualización ggplot(sp_importaciones,aes(DESDEPTO))+geom_bar()+facet_wrap(~GESTION) ggplot(sp_importaciones,aes(DESDEPTO))+geom_bar() #ggplot(sp_importaciones,aes(KILBRU))+geom_histogram() library(dbplot) sp_importaciones %&gt;% dbplot_bar(DESDEPTO) # Final. Cerrar la conexión a Spark spark_disconnect_all() ########################################################### # cargar el pvbol sp_pvbol&lt;-copy_to(sc,pvbol,name=&quot;elecciones&quot;) rm(pvbol) # interactuar con la base en spark sp_pvbol %&gt;% count() t0&lt;-sp_pvbol %&gt;% group_by(Departamento) %&gt;% count() #collect es para guardar la salida en la memoria de R t1&lt;-sp_pvbol %&gt;% group_by(Departamento) %&gt;% count() %&gt;% collect() # compute es para guardar la salida en la memoria de spark sp_t2&lt;-sp_pvbol %&gt;% group_by(Departamento) %&gt;% count() %&gt;% compute(&quot;t2&quot;) # consultas a spark sp_pvbol %&gt;% group_by(Departamento,Provincia) %&gt;% summarise(media_mas=mean(mas),media_cc=mean(cc),sd(mas)) # SQL show_query sp_pvbol %&gt;% group_by(Departamento) %&gt;% count() %&gt;% show_query() sp_pvbol %&gt;% group_by(Departamento) %&gt;% select(mas,cc) %&gt;% summarise_all(mean) %&gt;% show_query() # spark SQL library(DBI) e10&lt;-dbGetQuery(sc,&quot;Select * from elecciones limit 10&quot;) # figuras sp_pvbol %&gt;% select(cc) %&gt;% hist() library(ggplot2) ggplot(sp_pvbol,aes(cc))+geom_histogram() ggplot(sp_pvbol,aes(cc,mas))+geom_point() # recomendación ml load(&quot;C:\\\\Users\\\\ALVARO\\\\Documents\\\\GitHub\\\\EST-383\\\\data\\\\oct20.RData&quot;) head(computo) #filtrado aux&lt;-computo[computo$País==&quot;Bolivia&quot;,] #en R aux2&lt;-computo %&gt;% filter(País==&quot;Bolivia&quot;) #spark SQL library(DBI) top10 &lt;- dbGetQuery(sc, &quot;Select * from importaciones limit 10&quot;) top10 library(dplyr) sp_importaciones %&gt;% tally sp_covid2 %&gt;% tally oct20 %&gt;% tally covid_cache &lt;- sp_covid2 %&gt;% compute(&quot;covid_ch&quot;) covid_cache %&gt;% tally Para correr con las bases de la parte de importaciones #importaciones dimnames(sp_importaciones) sp_t1&lt;-sp_importaciones %&gt;% count(GESTION) %&gt;% compute(&quot;t1&quot;) aa&lt;-sp_importaciones %&gt;% count(GESTION) %&gt;% collect() aa&lt;-sp_importaciones %&gt;% count(GESTION,DESDEPTO) %&gt;% collect() sp_covid2 %&gt;% count(SEXO,NEUMONIA) sp_covid2 %&gt;% group_by(SEXO) %&gt;% summarise(mean(EDAD),na.rm=T) ww&lt;-sp_importaciones %&gt;% group_by(GESTION,DESDEPTO,NANDINA) %&gt;% summarise(total=sum(FOB,na.rm=T)) %&gt;% collect() sp_importaciones %&gt;% tbl(GESTION) oct20 %&gt;% select(MAS__IPSP,CC)%&gt;% summarise_all(mean) oct20 %&gt;% select(MAS__IPSP,CC)%&gt;% summarise_all(mean) %&gt;% show_query() oct20 %&gt;% summarise(qq=quantile(CC,probs=0.5)) oct20 %&gt;% select(MAS__IPSP,CC) %&gt;% ml_corr() #figuras oct20 %&gt;% select(CC) %&gt;% hist() library(dbplot) oct20 %&gt;% dbplot_histogram(CC,binwidth = 3) sp_importaciones %&gt;% dbplot_bar(GESTION) oct20 %&gt;% dbplot_raster(CC,MAS__IPSP) oct20 %&gt;% filter(PaAs==&quot;Bolivia&quot;)%&gt;% group_by(Departamento) %&gt;% summarise(voto=mean(CC)) %&gt;% ggplot(aes(Departamento,voto))+geom_bar(stat=&quot;identity&quot;) ggplot(oct20,aes(CC,MAS__IPSP))+geom_point() Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, and Richard Iannone. 2020. Rmarkdown: Dynamic Documents for r. https://CRAN.R-project.org/package=rmarkdown. R Core Team. 2019. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/. Xie, Yihui. 2019. Knitr: A General-Purpose Package for Dynamic Report Generation in r. https://CRAN.R-project.org/package=knitr. . 2020. Bookdown: Authoring Books and Technical Documents with r Markdown. https://CRAN.R-project.org/package=bookdown. Xie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. How to Read This Book. Transforming Climate Finance and Green Investment with Blockchains, 1. https://doi.org/10.1016/b978-0-12-814447-3.00041-0. "]]
