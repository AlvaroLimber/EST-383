---
bibliography: book.bib
nocite: '@*'
---
# Introducción a R {#introR}

> R es un software de libre distribución

## ¿Qué es R?

![Comparación perfecta](images/r.jpg)


![Ciencia de datos](images/ds.jpg)
### Algo de historia de R

  * R es el hermano de S
  * S es un lenguaje de programación estadística desarrollado por John Chambers de Bell Labs
  * El objetivo de S era “convertir las ideas en el software, de forma rápida y fielmente”
  * S fue creado en 1976 y se reinvento 1988 introduciendo muchos cambios
  * En 1993, StatSci (fabricante de S-Plus) adquieren licencia exclusiva a S
  * S-Plus integra S con una interfaz gráfica de usuario agradable y pleno apoyo al cliente
  * R Fue creado por Ross Ihaka y Robert Gentleman de la University of Auckland, New Zealand

### Acerca de R

  * El proyecto R inicio en 1991
  * R apareció por primera vez en 1996 como un software de código abierto!
  * Altamente personalizable a través de paquetes
  * La comunidad R, se basa en el poder de la colaboración con miles de paquetes de libre disposición
  * Existen muchas interfaces gráficas de usuario de R libres y comerciales (por ejemplo R Studio y Revolución)

### ¿Qué es R?

R es un conjunto integrado de servicios de software para la manipulación de datos, cálculo y representación gráfica. Incluye:

  * instalación sencilla y un fácil almacenamiento de datos
  * un conjunto de operadores para los cálculos en arrays, particularmente en las matrices
  * facilidad en los gráficos y el análisis de datos y
  * bien desarrollado, lenguaje de programación sencillo y eficaz que incluye condicionales, bucles, funciones recursivas definidos por el usuario.
  * Altamente intuitivo


> A pesar de ser libre y de código abierto, R es ampliamente utilizado por los analistas de datos dentro de las empresas y el mundo académico. (R en the NY Times)

Ver [NY Times](https://www.nytimes.com/2009/01/07/technology/business-computing/07program.html?pagewanted=all&_r=0) artículo.

### Algunas referencias

  * aRrgh: a newcomer's (angry) guide to R by Tim Smith and Kevin Ushey
  * Introductory Statistics with by Peter Dalgaard
  * R tarjeta de comandos http://cran.r-project.org/doc/contrib/Short-refcard.pdf
  * Tutorial de R http://www.cyclismo.org/tutorial/R/
  * R project and Bioconductor

Mas avanzado:

  * Hadley Wickham's book

### RStudio

RStudio es un ambiente libre y abierto de desarrollo de código integrado.

  * multiplataforma
  * El resaltado de sintaxis, completado de código, y la sangría inteligente
  * gestionar fácilmente múltiples directorios de trabajo
  * Flexible para el manejo de gráficos
  * Integrado con Knitr
  * Integrado con Git
  
### Instalación

  * R-CRAN https://cran.r-project.org/ (elija el Sistema operativo, descargue y siguiente, siguiente…)
  * R-Studio https://www.rstudio.com/ (elija el Sistema operativo, descargue y siguiente, siguiente…)
  
Nota: Para actualizar ambos paquetes: descargue la nueva versión e instale (las librerías no sufren cambios).

## R básico

R es una calculadora demasiado grande

```{r}
5*8
89+90
67/6
45^7
```

### Lógica de los comandos en R

Como entiende R los comandos

 > comando(argumentos, argumentos, ...)

Advertencia:

  * No es posible resumir un comando
  * R distingue mayúscula de minúscula
  * Siempre cerrar los paréntesis
  * R entiende el orden de los argumentos o su nombre clave
  
```{r}
exp(90) # exponencial
exp(0)
exp(1)
log(10) # logarítmo
sqrt(25) # raíz cuadrada
sqrt(x=25)
```

Comando para pedir ayuda

```{r}
help(pi) # equivalent ?pi
?sqrt
?sin
?Special
?sqrt
?log
```

Escribir varios comandos en una sola línea.

```{r}
log(20) ; exp(0) ; 5*6 ; 10^10
```


### Palabras reservadas y simbolos especiales de R

  * NA: datos perdidos
  * NULL: datos nulos
  * Inf -Inf: Infinito
  * #: comentario
  * TRUE (T), FALSE (F): valores lógicos
  * NaN: not a number
  * ?: Ayuda
  * x, ,x + y, x - y ,x * y ,x / y ,x ^ y (**),x %% y (mod) ,x %/% y (div int)
  * ! x, .x & y ,x && y ,x | y ,x || y 
  
### Símbolos Lógicos

```{r}
5 == 6  # igualdad
5^2 == 25

5 != 6 # desigualdad
25 != 25

!(5>10) # negación

(5==5) & (5>6) # Y lógico
(5==5) & (5<6) # Y lógico

(5==5) | (5>6) # ó lógico
(5==5) | (5<6) # ó lógico
(5!=5) | (5>6) # ó lógico
```

### Asignación o creación de objetos (estructuras, variables)


```{r}
x <- 50
x1 = 4
4 -> x2
xxxxcsdvsdvsdcs<-4
x*(x1^x2)
```

Trate de usar nombres significativos! Miren esto:

[Hadley Wickham's book](http://adv-r.had.co.nz/)
[Naming](https://guiquanz.gitbooks.io/google-cc-style-guide/content/ebook/Naming.html)

### Clases en R

```{r}
y1<-50
y2<-"hola"
y3<-(56>60)
y4<-NA  
y5<-NULL

class(y1)
class(y2)
class(y3)
class(y4)
class(y5)
```

## Tipos de estructuras

### Homogéneas

* Scalar: Valores simples

```{r}
y1<-50
y2<-"hola"
y3<-(56>60)
y4<-NA  
y5<-NULL
```

* Vectores: Colección de valores simples. Los vectores en R son vectores columna  

```{r}
v1 <- c(4,2,6,7,12)
v2 <- c("hola","cómo","estás","adios")
v3<- c(4,2,6,7,12,"hola")
v4<-(v1 > 5)
v5<-c(-9,pi,3/7)
```

* Matrices
* Arrays

### Heterogéneas

* Dataframes
* Listas

```{r}
rm(list=ls())
v<-1:10
v2<-c("a","b","2")
as.character(v)
as.numeric(v)
x1<-1
0/0
x2<-NULL
x2
str(x1)
typeof(x1)
typeof(v2)
# vectores con usos estadisticos

rbinom(10,5,0.1)
rnorm(10,5,10)
runif(10,50,500)
rchisq(10,2)
rexp(10,5)

x<-rchisq(1000,3)
hist(x)

(sum((x-mean(x))**4)/1000)/sd(x)**4
median(rexp(100000,3))
quantile(x,c(2,56)/100)
quantile(x,1:100/100)

a1<-matrix(1:20,4,5)
I<-diag(rep(1,5))
b1<-t(a1)%*%a1
b2<-a1%*%t(a1)
#solve(b1)
#solve(b2)
det(b1)
det(b2)
eigen(b1)
dim(b1)
#indexaci?n
v2<-c("a","b","2")
v2[1]
v2[3]

v3<-1:20
v3<-v3/10
v3
v3[c(3,19)]
v3[v3>0.5]

v3[v3==1]
v3[v3!=0.9]

v3[v3>0.5 & v3<1]
v3[v3>0.5 || v3<1]

a1
a1[1,]
a1[,1]
a1[3,1]
a1[c(1,4),]
a1[,c(2,4)]
a1[c(1,4),c(2,4)]
a1[,2]>6
a1[a1[,2]>6,]

mean(a1)
a2<-as.data.frame(a1)
a2


str(a2)
mean(a2$V1)
colMeans(a2)

summary(a2)
cov(a2)
cor(a2)
a2
```


## Loops y condiciones

```{r,eval=F}
rm(list = ls())
x<-5
## if
if(x>6){
  hist(rnorm(100,3,2))
}
## if else
if(x>6){
  hist(rnorm(100,3,2))
} else {
  boxplot(rnorm(100,3,2))
}
## if encadenado
x<-60
if(x>6){
  hist(rnorm(100,3,2))
  mean(x)
} else if(x<6){
  boxplot(rnorm(100,3,2))
} else if(typeof(x)=="double"){
  print("hola")
} else {
  print("hola hola")
}
##for
for(i in 1:100){
  print(i)
}
for(i in c(2,7,9,15,19)){
  print(i)
}  
for(i in c("a","b","c")){
  print(i)
}  
for(i in 1:5){
  for(j in 6:10){
    print(i*j)
  }
}
for(i in 1:5){
  for(j in 6:10){
    aux<-i*j
    print(aux)
    if(aux==20){
      break()
      print("hola")
      boxplot(rnorm(100,i,j))
    }
  }
}
#while
z<-1
k<-1
while(z>0.0001){
  print(k)
  z<-1/k
  k<-k+1
}
```


## Funciones

```{r,eval=F}
fx<-function(x){
  y<-8*x**2
  return(y)
}
fx(5)
fx(1:10)
curve(fx,xlim = c(-20,20),ylim=c(0,1000))
plot(fx)
##comando de estadisticas de tendencia central
tendencia<-function(x){
  n<-length(x)
  cat("media:",fill = T)
  print(sum(x)/n)
  cat("mediana:",fill = T)
  x<-sort(x)
  if(n%%2==0){
    me<-(x[n/2]+x[n/2+1])/2
  } else {
    me<-x[ceiling(n/2)]
  }
  print(me)
  cat("moda:",fill = T)
  tt<-table(x)
  mm<-max(tt)
  print(names(tt)[(table(x)==mm)])
  cat("media cuadrática:",fill = T)
  mc<-sqrt(sum(x**2)/n)
  print(mc)
  cat("media armónica",fill = T)
  ma<-n/sum(1/x)
  print(ma)
  cat("media geométrica:",fill = T)
  mg<-prod(x)**(1/n)
  print(mg)
}
xx<-scan()
a<-tendencia(xx)

tendencia2<-function(x){
  n<-length(x)
  media<-sum(x)/n
  x<-sort(x)
  if(n%%2==0){
    me<-(x[n/2]+x[n/2+1])/2
  } else {
    me<-x[ceiling(n/2)]
  }
  tt<-table(x)
  mm<-max(tt)
  mo<-names(tt)[(table(x)==mm)]
  mc<-sqrt(sum(x**2)/n)
  ma<-n/sum(1/x)
  mg<-prod(x)**(1/n)
  aux<-list(media,me,mo,mc,ma,mg)
  return(aux)
}
a<-tendencia2(xx)

tendenciaF<-function(x,f){
  n<-sum(f)
  media<-sum(x*f)/n
}
```


## Importacion de datos

```{r,eval=F}
#importando bases de datos
getwd()
setwd("C:\\Users\\PC18\\Documents\\R\\est383\\data\\eh18\\SPSS")
dir()
##SPSS
## activar o instalar librerias
library(foreign)
eh18d<-read.spss("EH2018_Discriminacion.sav",
          to.data.frame = T,use.value.labels=F)
names(eh18d)
table(eh18d$s10a_01a)
attributes(eh18d)$variable.labels[5]
head(eh18d)
##CSV
setwd("C:\\Users\\PC18\\Documents\\R\\est383\\data\\eh18\\CSV")
dir()
eh18d2<-read.csv2("EH2018_Discriminacion.csv")
aux<-read.csv("EH2018_Discriminacion.csv",sep=";")
table(eh18d2$s10a_01a)
daux<-c("Sexo","O. Sexual","Edad","piel","Pertenencia",
        "idioma","vestimente","procedencia","discapacidad",
        "religion","clase","otro")
for(i in 5:16){
barplot(prop.table(table(eh18d2[,i]))*100,main=daux[i-4])
}
```


## Dataframe y exploración

```{r,eval=F}
rm(list=ls())
setwd("C:\\Users\\PC18\\Documents\\R\\est383\\data\\eh18\\SPSS")
library(foreign)
dir()
eh18<-read.spss("EH2018_Persona.sav",
          to.data.frame = T,use.value.labels=F)
#################################################
names(eh18)#nombres de las variable
str(eh18)
class(eh18)
##renombrando variables
names(eh18)[c(5,6)]<-c("sexo","edad")
names(eh18)
##crear variable (mujer 1=mujer, 0 eoc)
eh18$mujer<-eh18$sexo==2
sum(eh18$mujer)
mean(eh18$mujer)
#exportación ("write")
write.dta(eh18,"eh18p.dta")
getwd()
#excel
library(readxl)
install.packages("writexl")
library(writexl)
library(help=writexl)
write_xlsx(eh18,"eh18p.xlsx")
apropos("read")
apropos("write")
install.packages("haven")
library(haven)

eh18$s03a_02e<-substr(as.character(eh18$s03a_02e),1,120)
eh18$s03a_02e<-gsub("  "," ",as.character(eh18$s03a_02e))

gsub("a","7","hola")
gsub("`","'","`s04a_04e`, `s04a_07ge`, `s04b_15e`, `s04b_16e`, `s04b_17e`, `s04b_18e`, `s04e_30c`, `s04f_35e`, `s05a_04`, `s05c_13_e`, `s05d_21e`, `s05d_22_e`, `s06a_06e`, `s06a_09e`, `s06a_10e`, `s06b_11a`, `s06b_11b`, `s06b_12a`, `s06b_12b`, `s06b_13`, `s06b_20e`, `s06e_34e`, `s06f_40a`, `s06f_40b`, `s06h_54e`, `s06h_55e`, `s06h_56e`, `s07a_01e1e`, `s07a_01e2e`, `s07a_02ce`, `s07b_05de`, `s07b_05ee`, `s07c_08e`, `s07c_09e`")
nchar(eh18$s03a_02e)

vv<-c('s04a_04e', 's04a_07ge', 's04b_15e', 's04b_16e', 's04b_17e', 's04b_18e', 's04e_30c', 's04f_35e', 's05a_04', 's05c_13_e', 's05d_21e', 's05d_22_e', 's06a_06e', 's06a_09e', 's06a_10e', 's06b_11a', 's06b_11b', 's06b_12a', 's06b_12b', 's06b_13', 's06b_20e', 's06e_34e', 's06f_40a', 's06f_40b', 's06h_54e', 's06h_55e', 's06h_56e', 's07a_01e1e', 's07a_01e2e', 's07a_02ce', 's07b_05de', 's07b_05ee', 's07c_08e', 's07c_09e')
for(i in vv){
  eh18[,i]<-gsub("  "," ",as.character(eh18[,i]))
  eh18[,i]<-substr(eh18[,i],1,120)
} 
write_sav(eh18,"eh18p.sav")
save(eh18,vv,file="eh18p.RData")
rm(list=ls())
getwd()
load("eh18p.RData")
set.seed(123456)####semilla
a<-matrix(rnorm(20),5,4)

apply(a, 1, sum)
apply(a, 2, mean)
apply(a, 1, sd)
mc<-function(x){
  n<-length(x)
  aux<-sqrt(sum(x^2)/n)
  return(aux)
}
apply(a, 1, mc)
apply(a, 2, mc)

tapply(eh18$mujer,eh18$depto,mean)
tapply(eh18$mujer,list(eh18$depto,eh18$area),mean)
tapply(eh18$edad,list(eh18$depto,eh18$area),mean)
tapply(eh18$edad>60,list(eh18$depto,eh18$area),mean)
tapply(eh18$edad<5,list(eh18$depto,eh18$area),mean)

tapply(eh18$p0,list(eh18$depto,eh18$area),mean,na.rm=T)
aux<-tapply(eh18$p0,list(eh18$depto,eh18$area,eh18$niv_ed_g),mean,na.rm=T)

as.data.frame(aux)

lapply()
mapply()
sapply()



```


## Estadística descriptiva

```{r,eval= F}
#Estadística descriptiva
rm(list=ls())
setwd("C:\\Users\\PC18\\Documents\\R\\est383\\data\\eh18\\SPSS")
#encuesta a hogares 2018
load("eh18p.RData")
data()#muestra las bases de datos disponibles en R
ChickWeight
View(ChickWeight)
help("ChickWeight")
##Porcentajes y tablas de fracuencias
t1<-table(eh18$sexo)#tabla de frcuencias
t2<-table(eh18$depto)
t3<-table(eh18$edad)

barplot(t1,col=c("blue","darkgreen"))#diagramas de barra
barplot(t3,horiz = T)
barplot(t3,col="red")
ldep<-c("CH","LP","CB","OR","PT","TJ","SC","BN","PD")
barplot(t2,col="black",names.arg = ldep)
#llevando a %
t2p<-prop.table(t2)*100
barplot(t2p,col="black",names.arg = ldep,ylab="%")
pie(t2p)

t3<-as.data.frame(t3)
t3$F<-cumsum(t3$Freq)
t3$r<-prop.table(t3$Freq)
t3$R<-cumsum(t3$r)
head(t3)

table(ChickWeight$Time)
table(ChickWeight$Diet)

dim(table(ChickWeight$Chick))
#tabla de contingencia
aux<-table(ChickWeight$Chick,ChickWeight$Diet)
aux[aux!=0]<-1
apply(aux,2,sum)
table(ChickWeight$Time)
table(ChickWeight$Diet[ChickWeight$Time==0])
##medidas de tendencia central
mean(eh18$edad)
median(eh18$edad)

mean(eh18$ylab,na.rm = T)
median(eh18$ylab,na.rm = T)
hist(eh18$ylab)
plot(density(eh18$ylab,na.rm = T))
locator(1)
summary(eh18$ylab)
#medidas de dispersion
var(eh18$ylab,na.rm = T)
sd(eh18$ylab,na.rm = T)
max(eh18$ylab,na.rm = T)-min(eh18$ylab,na.rm = T)
sd(eh18$ylab,na.rm = T)/mean(eh18$ylab,na.rm = T)
#medidas de forma
quantile(eh18$ylab,c(0.1,0.44,0.99),na.rm=T)
hist(eh18$edad)
#Coeficiente de asimetría
#EDAD
x<-eh18$edad
N<-length(x)
as<-(sum((x-mean(x))^3)/N)/sd(x)^3
as
#iNGRESO LABORAL
x<-eh18$ylab
x<-x[is.na(x)==F]
x<-x[complete.cases(x)]
N<-length(x)
as<-(sum((x-mean(x))^3)/N)/sd(x)^3
as
#kurtosis...
plot(density(rnorm(1000,sd=40)),ylim=c(0,0.08))
points(density(rnorm(1000,sd=10)),type="l",col="red")
points(density(rnorm(1000,sd=5)),type = "l",col="blue")

lm(ylab~edad,data=eh18,weights = f)
lm(ylab~-1+edad,data=eh18)
summary(lm(ylab~edad,data=eh18))





















```


## Muestreo e inferencia

```{r,eval=F}
rm(list=ls())
N<-15;n<-6
choose(N,n)
set.seed(123)
y1<-rnorm(N,10,5)
set.seed(234)
y2<-rexp(N,3)
set.seed(345)
y3<-runif(N,500,3000)
#par?metros
theta1<-mean(y1)
theta2<-sum(y2)
# sum(y3>1500)/N
# mean(y3>1500)
theta3<-mean(y3>1500)
#pr?ctica (real) solo se tiene acceso a una
#muestra
U<-1:10
set.seed(888)
s<-sample(U,n)
s
y1
#estimaciones
mean(y1[s]);theta1
mean(y2[s])*N ; theta2
mean(y3[s]>1500) ; theta3

combn(U,3)
combn(y1,3)

combn(y1,3,mean)
#theta1
t1s<-apply(combn(y1,n),2,mean)
mean(t1s)
theta1
hist(t1s)
plot(density(t1s))
shapiro.test(t1s)
#theta2
t2s<-apply(combn(y2,n),2,mean)*N
mean(t2s);theta2
hist(t2s)
plot(density(t2s))
shapiro.test(t2s)
#theta3
t3s<-apply(combn(y3,n)>1500,2,mean)
mean(t3s);theta3
hist(t3s)
plot(density(t3s))
shapiro.test(t3s)
####Inferencia a partir de una muestra
#libreria survey
install.packages("survey")
library(survey)
bd<-data.frame(y1,y2,y3=y3>1500)
set.seed(123)
s<-sample(1:15,7)
bds<-bd[s,]
bds$w<-15/7
bds$pk<-7/15
bds
dm1<-svydesign(ids=~0,probs = ~pk,data=bds)
svymean(~y1,design = dm1)
svytotal(~y2,design = dm1)
library(help=survey)
```


## Gráficos de origen

```{r,eval=F}
rm(list=ls())
################
plot(0,0)#inicia una hoja en blanco
plot(0,0,type = "n")

x<-c(3,4,7,2)
y<-c(0,6,9,2)
plot(x,y,type="p")

plot(x,y,type="h")
plot(x,y,type="l")
plot(x[order(x)],y[order(x)],type="l")
plot(x,y,type = "b")
plot(x,y,type = "o")

par(mfrow=c(2,2))
plot(x,y,xlim=c(0,10),ylim=c(0,10),main="c/PUNTOS")
plot(x,y,type="n",xlim=c(0,10),ylim=c(0,10),main = "S/puntos")
plot(x,y,type="n",xlim=c(0,10),ylim=c(0,10),
     axes = F,main="sin ejes")
plot(x,y,type="n",xlim=c(0,10),ylim=c(0,10),
     axes = F,ann = F,main = "blanco")
par(mfrow=c(1,1))

plot(x,y,type="n",xlim=c(0,10),ylim=c(0,10),
     axes = F,ann = F)
points(x,y,cex=c(1,2,3,4)+1)     
points(x,y,cex=c(1,2,3,4)+1,pch=15)     
points(x,y,cex=c(1,2,3,4)+1,pch=15,col="blue")     
points(x,y,cex=c(1,2,3,4)+1,pch=0:3,
       col=c("red","darkblue","pink","darkgreen"))
#points(x,y,cex=2)     
pdf("figura1.pdf",width = 15,height = 5)
plot(x,y,type="n",xlim=c(0,20),ylim=c(0,20),
     axes = F,ann = F)
points(seq(2,10,2),seq(2,10,2),type="p",lwd=4,
       col="blue",lty=4)
text(seq(2,10,2),seq(2,10,2),
     labels = c("p1","p2","p3","p4","p5"),pos=3,
     cex=1:5,col="brown")
axis(1,seq(0,20,10),lwd=3)
axis(2,seq(0,20,5),lwd=2)
axis(4,seq(0,20,5),seq(0,400,100),lwd=2)
axis(3,seq(0,20,10),c("A","B","C"),lwd=2)
title(main="Plot en R",col.main="darkred",
      cex.main=3)
title(xlab = "Eje X",ylab="Eje Y",cex.lab=2,
      col.lab="gray")
legend("topright",legend = c("a","b","c"),
       lwd=c(1,2,3),col=c("darkred","black","gray"))
dev.off()
getwd()

png("figura1.png")
plot(x,y,type="n",xlim=c(0,20),ylim=c(0,20),
     axes = F,ann = F)
points(seq(2,10,2),seq(2,10,2),type="p",lwd=4,
       col="blue",lty=4)
dev.off()

pdf("sec.pdf")
for(i in 1:10){
  plot(i,0,xlim=c(0,10))
}
dev.off()


abline(h=c(2,3,4),lty=2)
abline(v=c(2,3,4))

bd<-as.data.frame(state.x77)
bd$name<-row.names(bd)
head(bd)

```



## ggplot

```{r,eval=F}
#######################################
# Clase: gráficos en R, ggplot
# Materia: Programación Estadística I
# Fecha: 9 de Marzo
#######################################
rm(list=ls())
#######################################
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("maps")
#install.packages("ggvis")
library(ggplot2)
library(dplyr)
library(maps)
library(ggvis)
library(readxl)
#######################################
urlfile<-url('https://raw.githubusercontent.com/AlvaroLimber/EST-383/master/data/oct20.RData')
load(urlfile)
names(computo)[18]<-"MAS"
#######################################
#The grammar of graphics is an answer to a question: what is a statistical graphic? 

#base graphics 1983
#grid 2000
#lattice 1993
#ggplot 2005
#ggvis 2014

## Datos, estetica y geometria (layers)

library(ggplot2)
mpg

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_area()

ggplot(computo,aes(MAS,CC))+geom_point()

ggplot(mpg, aes(displ, hwy)) +
  geom_line()

ggplot(mpg, aes(displ)) +
  geom_histogram()

#Color tamaño y forma
ggplot(mpg, aes(displ, hwy,colour = class)) +
  geom_point()

ggplot(mpg, aes(displ, hwy,shape = drv)) +
  geom_point()

ggplot(mpg, aes(displ, hwy,size = cyl)) +
  geom_point()

ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))

ggplot(mpg, aes(displ, hwy)) + geom_point(colour = "blue")

ggplot(mpg, aes(displ, hwy)) + 
  geom_point() + 
  facet_wrap(~class)

ggplot(mpg, aes(displ, hwy)) + 
  geom_point() + 
  facet_wrap(~class+drv)

#geoms
geom_smooth() # ajuste y en x
geom_boxplot()
geom_histogram()
geom_freqpoly()
geom_bar()
geom_path()
geom_line()

#ajuste de un modelo
ggplot(mpg, aes(displ, hwy)) + 
  geom_point() + 
  geom_smooth()

ggplot(mpg, aes(displ, hwy)) + 
  geom_point() + 
geom_smooth(method = "lm")

ggplot(mpg, aes(drv, hwy)) + 
  geom_point()

ggplot(mpg, aes(drv, hwy)) + geom_jitter()
ggplot(mpg, aes(drv, hwy)) + geom_boxplot()
ggplot(mpg, aes(drv, hwy)) + geom_violin()

ggplot(mpg, aes(hwy)) + geom_histogram()
#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
ggplot(mpg, aes(hwy)) + geom_freqpoly()
#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

ggplot(mpg, aes(hwy)) + 
  geom_freqpoly(binwidth = 2.5)

ggplot(mpg, aes(hwy)) + 
  geom_freqpoly(binwidth = 1)

ggplot(mpg, aes(hwy)) + 
  geom_density()

ggplot(mpg, aes(displ, colour = drv)) + 
  geom_freqpoly(binwidth = 0.5)

ggplot(mpg, aes(displ, fill = drv)) + 
  geom_histogram(binwidth = 0.5) 

ggplot(mpg, aes(displ, fill = drv)) + 
  geom_histogram(binwidth = 0.5) + 
    facet_wrap(~drv, ncol = 1)

ggplot(mpg, aes(manufacturer)) + 
  geom_bar()

aa<-as.data.frame(table(mpg$class))
aa
ggplot(aa,aes(Var1,Freq))+ 
  geom_bar()

ggplot(aa,aes(Var1,Freq)) + geom_bar(stat = "identity")
ggplot(drugs, aes(drug, effect)) + geom_point()

ggplot(mpg, aes(cty, hwy)) +
  geom_point(alpha = 1 / 3)

ggplot(mpg, aes(cty, hwy)) +
  geom_point(alpha = 1 / 3) + 
  xlab("city driving (mpg)") + 
  ylab("highway driving (mpg)")

# Remove the axis labels with NULL
ggplot(mpg, aes(cty, hwy)) +
  geom_point(alpha = 1 / 3) + 
  xlab(NULL) + 
  ylab(NULL)

ggplot(mpg, aes(drv, hwy)) +
  geom_jitter(width = 0.25)

ggplot(mpg, aes(drv, hwy)) +
  geom_jitter(width = 0.25) + 
  xlim("f", "r") + 
  ylim(20, 30)
#> Warning: Removed 137 rows containing missing values (geom_point).

# For continuous scales, use NA to set only one limit
ggplot(mpg, aes(drv, hwy)) +
  geom_jitter(width = 0.25, na.rm = TRUE) + 
  ylim(NA, 30)


#output
p <- ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  geom_point()

# Save png to disk


ggsave("plot.png", p, width = 5, height = 5)

saveRDS(p, "plot.rds")
q <- readRDS("plot.rds")

ggplot(faithfuld, aes(eruptions, waiting)) + 
  geom_contour(aes(z = density, colour = ..level..))

mi_counties <- map_data("world") %>% 
  select(lon = long, lat, group, id = subregion)

ggplot(mi_counties, aes(lon, lat)) + 
  geom_point(size = .25, show.legend = FALSE) +
  coord_quickmap()

ggplot(mi_counties, aes(lon, lat, group = group)) +
  geom_polygon(fill = "white", colour = "grey50") + 
  coord_quickmap()

#temas
theme_bw()
theme_grey()
theme_linedraw()
theme_light()
theme_dark()
theme_minimal()
theme_classic()
theme_void()
```


## R Markdown 

**"R Markdown"** se introdujo por primera vez en el paquete knitr a principios de 2012. La idea era incrustar fragmentos de código (de R u otros) en los documentos de Markdown. De hecho, knitr soportó varios lenguajes de autoría desde el principio además de Markdown, incluidos LaTeX, HTML, AsciiDoc, reStructuredText y Textile.

Markdown se ha convertido en el formato de documento más popular. La simplicidad de Markdown se destaca claramente entre estos formatos de documentos.

### Instalación

```{r,eval=F}
install.packages('rmarkdown')

# Si se prefiere la versión en desarrollo
if (!requireNamespace("devtools"))
  install.packages('devtools')
devtools::install_github('rstudio/rmarkdown')
```

Si el objetivo es usar Markdown para generar documentos PDF se necesita instalar Latex.

Existen cheatsheets utiles para usar markdown, como: [cheatsheets](https://github.com/rstudio/cheatsheets/raw/master/rmarkdown-2.0.pdf)

### YAML Header
Al inicio del archivo y entre las lineas ---

```{r,eval=FALSE}
---
title: Mi documento
author: Juan Perez
date: Marzo 22, 20220
output: html_document
---
```


### Sintaxis básica

Énfasis sobre el texto,
```{r,eval=FALSE}
*italic*   **bold**
_italic_   __bold__
```

Secciones, 

```{r,eval=FALSE}
# Header 1
## Header 2
### Header 3
```

Items (viñetas) no ordenadas y ordenadas,

```{r,eval=FALSE}
* Item 1
* Item 2
    + Item 2a
    + Item 2b

1. Item 1
2. Item 2
3. Item 3
    + Item 3a
    + Item 3b
```

Palabras clave con referencias web,

```{r,eval=FALSE}
[linked phrase](http://example.com)
```

Imágenes simples o con titulo,

```{r,eval=FALSE}
![](http://example.com/logo.png)

![optional caption text](figures/img.png)
```

Blockquotes

> It's always better to give than to receive.

```{r,eval=FALSE}
A friend once said:

> It's always better to give than to receive.
```

Ecuaciones en linea y en párrafo,

En linea $\sum_i{x^2}$ o en párrafo:

$$\sum_i{x^2}$$

```{r,eval=FALSE}
$equation$

$$ equation $$
```

### Tipos de documentos

* beamer_presentation
* github_document
* html_document
* ioslides_presentation
* latex_document
* md_document
* odt_document
* pdf_document
* powerpoint_presentation
* rtf_document
* slidy_presentation
* word_document

### Chunks

Los chunks son entornos que permiten incluir código en R dentro de las distintos tipos de documentos que genera Rmarkdown, los chunks inician con ````  ```{r} y termina con ``` ````, también es posible introducir chunks en linea con el texto, esto se logra introduciendo 

```{r,eval=F}
Texto ... `r <code>` ... texto
```

La parte {r} del chunk sirve para introducir las distintas opciones que va a contener ese chunk, las opciones disponibles son:

* echo (default = TRUE), muestra el código del chunk en la salida del documento
* eval (default = TRUE), corre el código del chunk
* message (default = TRUE), muestra los mensajes que genera el chunk

Existen funciones útiles para mejorar las salidas de tablas, tales como xtable y kable de la librería knitr.

## Shiny 

Shiny es una librería de RStudio orientada a crear aplicaciones web interactivas con R. Una vez instalada existen dos formas de crear una aplicación en Shiny.
Una alternativa cada vez mas popular es la de crear un documento shiny junto con Markdown.

1. Mediante un solo archivo denominando app.R
2. Mediante dos archivos separados, el server.R y ui.R

Se recomienda que en cualquiera de las dos alternativas, estos archivos estén contenidos en alguna carpeta. Existen dos partes esenciales al momento de definir una app en Shiny, el UI que es una función que define la interfaz de la aplicación y el Server que define una función con instrucciones sobre cómo construir y reconstruir los objetos R que se mostraran en la UI. La composición básica según las formas de aplicarlas son:

```{r,eval=FALSE}
# app.R
library(shiny)
ui <- fluidPage(
numericInput(inputId = "n",
"Sample size", value = 25),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui = ui, server = server)
```

```{r,eval=F}
# ui.R

fluidPage(
numericInput(inputId = "n",
"Sample size", value = 25),
plotOutput(outputId = "hist")
)

# server.R

function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})

```

### UI

Al ser UI la interfaz esta permite la interacción directa con el usuario, a estas se las denominan los entradas $input$, las opciones de *input* son:

* **Botón de acción:** actionButton(inputId, label, icon)
* **Enlace:** actionLink(inputId, label, icon,)
* **Check box múltiple:** checkboxGroupInput(inputId,label, choices, selected, inline)
* **Check box simple:** checkboxInput(inputId, label,value)
* **Fecha:** dateInput(inputId, label, value,min, max, format, startview,weekstart, language)
* **Rango de fecha:** dateRangeInput(inputId, label,start, end, min, max, format,startview, weekstart, language,separator)
* **Cargar archivo:** fileInput(inputId, label, multiple,accept)
* **Entrada numérica:** numericInput(inputId, label, value,min, max, step)
* **Tipo contraseña:** passwordInput(inputId, label,value)
* **Selección tipo botones:** radioButtons(inputId, label,choices, selected, inline)
* **Seleccionable:** selectInput(inputId, label, choices,selected, multiple, selectize,width, size) 
* **Slider:** sliderInput(inputId, label, min,max, value, step, round, format,locale, ticks, animate, * width,sep,pre, post)
* **Enviar** submitButton(text, icon)
* **Entrada de texto** textInput(inputId, label, value)

Los inputs principalmente tienen dos argumentos el **inputId** que se refiere al identificador del input, este se utiliza en el server, y el **label** que es la etiqueta que aparece en la interfaz visual, estos inputs se asignan a algún objeto (xx<-input()). En el server se tiene acceso al input mediante input$xx.

### Server

En cuanto el server, este usa los distintos inputs para generar las salidas (outputs), las opciones de salidas disponibles son:

* DT::renderDataTable(expr, options,callback, escape, env, quoted)
* renderImage(expr, env, quoted,deleteFile)
* renderPlot(expr, width, height, res, …,env, quoted, func)
* renderPrint(expr, env, quoted, func,width)
* renderTable(expr,…, env, quoted, func)
* renderText(expr, env, quoted, func)
* renderUI(expr, env, quoted, func)

Estos outputs "render" se asignan a un objeto y luego ellos deben ser incluidos dentro del UI con su correspondiente Output:

* dataTableOutput(outputId, icon, …)
* imageOutput(outputId, width, height,click, dblclick, hover, hoverDelay, inline,hoverDelayType, brush, clickId,hoverId)
* plotOutput(outputId, width, height, click,dblclick, hover, hoverDelay, inline,hoverDelayType, brush, clickId,hoverId)
* verbatimTextOutput(outputId)
* tableOutput(outputId)
* textOutput(outputId, container, inline)
* uiOutput(outputId, inline, container, …) y htmlOutput(outputId, inline, container, …)

## Ejercicios Propuestos

1. Crear una función que devuelva los $k$ primeros números primos
2. Crear una función que calcule la mediana para tablas de frecuencias con intervalos de clases
3. Crear una función que calcule los Quantiles para tablas de frecuencias con intervalos de clases
4. Realice una función para el calculo del tamaño de muestra para el muestreo aleatorio simple, considere la media, el margen de error relativo y coeficientes de confianza.
5. Crear una función que realice la prueba de independencia Chi-cuadrado 
6. Empleando la ENDSA muestre por año y departamento el porcentaje de personas que fuman
7. Utilizando la base de datos del COVID-19 genere un gráfico de evolución de contagios, muertes y recuperados. Use los gráficos de origen
8. Utilizando la base de datos del COVID-19 genere un gráfico de evolución de contagios, muertes y recuperados. Use ggplot
9. Utilizando la encuesta 2018, genere un reporte que presente:
    * Total de población y viviendas por departamento y área
    * Pobreza moderada por Departamento y área
    * Indice de Gini por departamento
10. Realice una función en Shiny empleando la base de datos electoral del $20o$ que permita ver los resultados por recinto, seleccionando, su país, departamento, municipio, recinto.
11. Usando la EH 2018, determine el porcentaje de personas que sufrieron un Atraco (Robo a personas) en la vía pública en los últimos 12 meses.